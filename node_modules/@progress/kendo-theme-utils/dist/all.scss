// This file is auto-generated. Do not edit!
// baka:source packages/utils/scss/all.scss

// #region @import "./index.import.scss"; -> packages/utils/scss/index.import.scss
// #region @import "./_functions.scss"; -> packages/utils/scss/_functions.scss
// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
    @if type-of( $string ) == number {
        $string: $string + "";
    }

    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}


$_kendo-escape-class-name: (
    ".": "\\.",
    "/": "\\/"
);

@function escape-class-name( $text ) {
    $_text: $text;

    @each $char, $rep in $_kendo-escape-class-name {
        $_text: str-replace( $_text, unquote( $char ), unquote( $rep ) );
    }

    @return $_text;
}

// #endregion
// #region @import "./_variables.scss"; -> packages/utils/scss/_variables.scss
$kendo-prefix: k- !default;
$kendo-important: true !default;
$kendo-colors: () !default;
$kendo-spacing: (
    0: 0,
    0.5: .125rem, // sass-lint:disable-line leading-zero
    1: .25rem,
    1.5: .375rem,
    2: .5rem,
    2.5: 6.25rem,
    3: .75rem,
    3.5: .875rem,
    4: 1rem,
    5: 1.25rem,
    6: 1.5rem,
    7: 1.75rem,
    8: 2rem,
    9: 2.25rem,
    10: 2.5rem,
    11: 2.75rem,
    12: 3rem,
    14: 3.5rem,
    16: 4rem,
    20: 5rem,
    24: 6rem,
    px: 1px,
    thin: .125rem,
    hair: .0625rem
) !default;
$kendo-sizing: map-merge( $kendo-spacing, (
    // sass-lint:disable-block indentation
    "auto": auto,
    "1/2": 50%,
    "1/3": 33.333333%,
    "2/3": 66.666667%,
    "1/4": 25%,
    "2/4": 50%,
    "3/4": 75%,
    "1/5": 20%,
    "2/5": 40%,
    "3/5": 60%,
    "4/5": 80%,
    "1/6": 16.666667%,
    "2/6": 33.333333%,
    "3/6": 50%,
    "4/6": 66.666667%,
    "5/6": 83.333333%,
    "1/12": 8.333333%,
    "2/12": 16.666667%,
    "3/12": 25%,
    "4/12": 33.333333%,
    "5/12": 41.666667%,
    "6/12": 50%,
    "7/12": 58.333333%,
    "8/12": 66.666667%,
    "9/12": 75%,
    "10/12": 83.333333%,
    "11/12": 91.666667%,
    "full": 100%,
    "min": min-content,
    "max": max-content,
    "fit": fit-content
)) !default;

//

$kendo-utils: (

    // Accessibility
    "screen-readers": true,

    // Layout
    "aspect-ratio": (
        auto: auto,
        square: unquote("1 / 1"),
        video: unquote("16 / 9")
    ),
    "container": (),
    "columns": (),
    "break-after": (),
    "break-before": (),
    "break-inside": (),
    "box-decoration-break": (),
    "box-sizing": (),
    "display": (
        none,
        block,
        inline,
        inline-block,
        flex,
        inline-flex,
        grid,
        inline-grid,
        table,
        inline-table,
        list-item
    ),
    "float": (
        left,
        right,
        none
    ),
    "clear": (
        left,
        right,
        both,
        none
    ),
    "isolation": (),
    "object-fit": (),
    "object-position": (),
    "overflow": (
        auto: auto,
        hidden: hidden,
        visible: visible,
        scroll: scroll,
        clip: clip,
        x-auto: auto,
        x-hidden: hidden,
        x-visible: visible,
        x-scroll: scroll,
        x-clip: clip,
        y-auto: auto,
        y-hidden: hidden,
        y-visible: visible,
        y-scroll: scroll,
        y-clip: clip
    ),
    "overscroll": (),
    "position": (
        static,
        relative,
        absolute,
        fixed,
        sticky
    ),
    "inset": (
        0: 0,
        1: 1px,
        -1: -1px
    ),
    "visibility": (
        visible,
        hidden
    ),
    "zindex": (
        0: 0,
        10: 10,
        20: 20,
        30: 30,
        40: 40,
        50: 50,
        auto: auto
    ),

    // Flex / Grid
    "flex-direction": (
        row: row,
        row-reverse: row-reverse,
        col: column,
        col-reverse: column-reverse
    ),
    "flex-wrap": (
        wrap,
        wrap-reverse,
        nowrap
    ),
    "flex": (
        1: 1 1 0%,
        auto: 1 1 auto,
        initial: 0 1 auto,
        none: none
    ),
    "flex-grow": (
        DEFAULT: 1,
        0: 0
    ),
    "flex-shrink": (
        DEFAULT: 1,
        0: 0
    ),
    "flex-basis": $kendo-sizing,
    "order": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        first: -9999,
        last: 9999,
        none: 0
    ),
    "grid-template-columns": (
        1: repeat( 1, minmax( 0, 1fr ) ),
        2: repeat( 2, minmax( 0, 1fr ) ),
        3: repeat( 3, minmax( 0, 1fr ) ),
        4: repeat( 4, minmax( 0, 1fr ) ),
        5: repeat( 5, minmax( 0, 1fr ) ),
        6: repeat( 6, minmax( 0, 1fr ) ),
        7: repeat( 7, minmax( 0, 1fr ) ),
        8: repeat( 8, minmax( 0, 1fr ) ),
        9: repeat( 9, minmax( 0, 1fr ) ),
        10: repeat( 10, minmax( 0, 1fr ) ),
        11: repeat( 11, minmax( 0, 1fr ) ),
        12: repeat( 12, minmax( 0, 1fr ) ),
        none: none
    ),
    "grid-template-rows": (
        1: repeat( 1, minmax( 0, 1fr ) ),
        2: repeat( 2, minmax( 0, 1fr ) ),
        3: repeat( 3, minmax( 0, 1fr ) ),
        4: repeat( 4, minmax( 0, 1fr ) ),
        5: repeat( 5, minmax( 0, 1fr ) ),
        6: repeat( 6, minmax( 0, 1fr ) ),
        7: repeat( 7, minmax( 0, 1fr ) ),
        8: repeat( 8, minmax( 0, 1fr ) ),
        9: repeat( 9, minmax( 0, 1fr ) ),
        10: repeat( 10, minmax( 0, 1fr ) ),
        11: repeat( 11, minmax( 0, 1fr ) ),
        12: repeat( 12, minmax( 0, 1fr ) ),
        none: none
    ),
    "grid-column-start": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-column-end": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-column-span": (
        1: span 1 / span 1,
        2: span 2 / span 2,
        3: span 3 / span 3,
        4: span 4 / span 4,
        5: span 5 / span 5,
        6: span 6 / span 6,
        7: span 7 / span 7,
        8: span 8 / span 8,
        9: span 9 / span 9,
        10: span 10 / span 10,
        11: span 11 / span 11,
        12: span 12 / span 12,
        full: unquote("1 / -1"),
        auto: auto
    ),
    "grid-row-start": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-row-end": (
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        10: 10,
        11: 11,
        12: 12,
        13: 13,
        auto: auto
    ),
    "grid-row-span": (
        1: span 1 / span 1,
        2: span 2 / span 2,
        3: span 3 / span 3,
        4: span 4 / span 4,
        5: span 5 / span 5,
        6: span 6 / span 6,
        7: span 7 / span 7,
        8: span 8 / span 8,
        9: span 9 / span 9,
        10: span 10 / span 10,
        11: span 11 / span 11,
        12: span 12 / span 12,
        full: span 1 / span -1,
        auto: auto
    ),
    "grid-auto-flow": (
        row: row,
        col: column,
        row-dense: row dense,
        col-dense: column dense
    ),
    "grid-auto-columns": (
        auto: auto,
        min: min-content,
        max: max-content,
        fr: minmax( 0, 1fr ),
    ),
    "grid-auto-rows": (
        auto: auto,
        min: min-content,
        max: max-content,
        fr: minmax( 0, 1fr ),
    ),
    "gap": $kendo-spacing,
    "align-content": (
        normal: normal,
        stretch: stretch,
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly
    ),
    "align-items": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "align-self": (
        auto: auto,
        normal: normal,
        stretch: stretch,
        start: flex-start,
        end: flex-end,
        center: center
    ),
    "justify-content": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly,
        stretch: stretch
    ),
    "justify-items": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "justify-self": (
        auto: auto,
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "place-content": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly,
        stretch: stretch
    ),
    "place-items": (
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),
    "place-self": (
        auto: auto,
        normal: normal,
        start: flex-start,
        end: flex-end,
        center: center,
        stretch: stretch
    ),

    // Spacing
    "margin": $kendo-spacing,
    "padding": $kendo-spacing,
    "space-between": (),

    // Sizing
    "width": map-merge( $kendo-sizing, (
        // sass-lint:disable-block indentation
        screen: 100vw
    )),
    "min-width": (
        0: 0,
        full: 100%,
        screen: 100vw,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),
    "max-width": (
        none: none,
        0: 0,
        full: 100%,
        screen: 100vw,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),
    "height": map-merge( $kendo-sizing, (
        // sass-lint:disable-block indentation
        screen: 100vh
    )),
    "min-height": (
        0: 0,
        full: 100%,
        screen: 100vh,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),
    "max-height": (
        none: none,
        0: 0,
        full: 100%,
        screen: 100vh,
        min: min-content,
        max: max-content,
        fit: fit-content
    ),

    // Typography
    "font-family": (),
    "font-size": (),
    "font-smoothing": (),
    "font-style": (
        italic: italic,
        non-italic: normal
    ),
    "font-weight": (
        "thin": 100,
        "extralight": 200,
        "light": 300,
        "normal": 400,
        "medium": 500,
        "semibold": 600,
        "bold": 700,
        "extrabold": 800,
        "black": 900
    ),
    "font-variant-numeric": (),
    "letter-spacing": (),
    "line-height": (),
    "list-style-type": (),
    "list-style-position": (),
    "text-align": (
        left,
        right,
        center,
        justify
    ),
    "text-color": (),
    "text-decoration": (),
    "text-decoration-width": (),
    "text-decoration-style": (),
    "text-decoration-color": (),
    "text-decoration-offset": (),
    "text-transform": (
        uppercase: uppercase,
        lowercase: lowercase,
        capitalize: capitalize,
        normal-case: none
    ),
    "text-overflow": (),
    "text-indent": (),
    "vertical-align": (),
    "white-space": (
        normal,
        nowrap,
        pre,
        pre-line,
        pre-wrap,
        break-spaces
    ),
    "word-break": (),

    // Background

    // Border
    "border-width": (
        DEFAULT: 1px,
        0: 0,
        2: 2px,
        4: 4px,
        8: 8px
    ),
    "border-style": (
        solid,
        dashed,
        dotted,
        double,
        hidden,
        none
    ),
    "border-color": (),
    "border-radius": (
        DEFAULT: .25rem,
        0: 0,
        sm: .125rem,
        md: .25rem,
        lg: .5rem,
        none: 0,
        full: 9999px
    ),
    "outline-width": (
        DEFAULT: 1px,
        0: 0,
        2: 2px,
        4: 4px,
        8: 8px
    ),
    "outline-style": (
        solid,
        dashed,
        dotted,
        double,
        groove,
        ridge,
        inset,
        outset,
        none
    ),
    "outline-color": (),
    "outline-offset": (
        0: 0,
        1: 1px,
        2: 2px,
        4: 4px,
        8: 8px
    ),

    // Effects

    // Filter

    // Table
    "border-collapse": (
        collapse,
        separate
    ),
    "table-layout": (
        auto,
        fixed
    ),

    // Transition

    // Transform
    "flip": true,
    "scale": (
        "0",
        ".25",
        ".5",
        ".75",
        "1",
        "1.25",
        "1.5"
    ),
    "rotate": (
        0: 0deg,
        45: 45deg,
        90: 90deg,
        135: 135deg,
        180: 180deg,
        225: 225deg,
        270: 270deg,
        315: 315deg
    ),
    "translate": map-remove( $kendo-sizing, "auto", "min", "max", "fit" ),
    "skew": (
        0: 0deg,
        1: 1deg,
        2: 2deg,
        3: 3deg,
        4: 4deg,
        5: 5deg,
        6: 6deg,
        7: 7deg,
        8: 8deg,
        9: 9deg,
        10: 10deg,
        11: 11deg,
        12: 12deg
    ),
    "origin": (
        center: center,
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        top-left: top left,
        top-right: top right,
        bottom-left: bottom left,
        bottom-right: bottom right
    ),


    // Interactivity
    "accent-color": (),
    "appearance": (
        none,
        auto
    ),
    "cursor": (
        none,
        auto,
        default,
        context-menu,
        help,
        pointer,
        progress,
        wait,
        cell,
        crosshair,
        text,
        vertical-text,
        alias,
        copy,
        move,
        no-drop,
        not-allowed,
        e-resize,
        n-resize,
        ne-resize,
        nw-resize,
        s-resize,
        se-resize,
        sw-resize,
        w-resize,
        ew-resize,
        ns-resize,
        nesw-resize,
        nwse-resize,
        col-resize,
        row-resize,
        all-scroll,
        zoom-in,
        zoom-out,
        grab,
        grabbing
    ),
    "caret-color": (),
    "pointer-events": (
        none,
        auto
    ),
    "resize": (
        DEFAULT: both,
        none: none,
        x: horizontal,
        y: vertical
    ),
    "scroll-behavior": (
        auto,
        smooth
    ),
    "scroll-snap-type": (
        none: none,
        snap-x: x var(--#{$kendo-prefix}scroll-snap-strictness),
        snap-y: y var(--#{$kendo-prefix}scroll-snap-strictness),
        snap-both: both var(--#{$kendo-prefix}scroll-snap-strictness)
    ),
    "scroll-snap-align": (
        start,
        end,
        center,
        none
    ),
    "scroll-snap-stop": (
        normal,
        always
    ),
    "scroll-margin": $kendo-spacing,
    "scroll-padding": $kendo-spacing,
    "touch-action": (
        none,
        auto,
        pan-x,
        pan-left,
        pan-right,
        pan-y,
        pan-up,
        pan-down,
        pinch-zoom,
        manipulation
    ),
    "user-select": (
        none,
        auto,
        text,
        all,
        contain
    ),
    "will-change": (
        auto: auto,
        scroll: scroll-position,
        contents: contents,
        transform: transform
    )
) !default;

// #endregion
// #region @import "./_mixins.scss"; -> packages/utils/scss/_mixins.scss
@mixin generate-utils( $name, $props, $values, $function: "", $important: $kendo-important ) {
    @if $values {
        $_props: if( type-of($props) == list, $props, ( $props ) );
        $_fn: if( function-exists( $function ), get-function( $function ), null );

        @each $key, $val in $values {
            $_key: escape-class-name( $key );
            $_val: if( type-of($values) == list, $key, $val );
            $_name: escape-class-name( $name );
            $_selector: if( $_key == DEFAULT, #{$kendo-prefix}#{$_name}, #{$kendo-prefix}#{$_name}-#{$_key});

            @if $important != only {
                .#{$_selector} {
                    @each $prop in $_props {
                        #{$prop}: if( $_fn, call($_fn, $_val), $_val );
                    }
                }
            }
            @if $important {
                .\!#{$_selector} {
                    @each $prop in $_props {
                        #{$prop}:  if( $_fn, call($_fn, $_val), $_val ) !important; // sass-lint:disable-line no-important
                    }
                }
            }
        }
    }
}

// #endregion

// #region @import "./accessibility/index.import.scss"; -> packages/utils/scss/accessibility/index.import.scss
// #region @import "./_screen-readers.scss"; -> packages/utils/scss/accessibility/_screen-readers.scss
$kendo-utils-accessibility: map-get( $kendo-utils, "accessibility" ) !default;

@if $kendo-utils-accessibility {
    /// @name .k-sr-only
    /// @description This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.
    /// @group accessibility
    .#{$kendo-prefix}sr-only {
        margin: -1px;
        padding: 0;
        width: 1px;
        height: 1px;
        border-width: 0;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        position: absolute;
    }

    .#{$kendo-prefix}not-sr-only {
        margin: 0;
        padding: 0;
        width: auto;
        height: auto;
        border-width: 0;
        overflow: visible;
        clip: auto;
        position: static;
    }
}

// #endregion

// #endregion
// #region @import "./layout/index.import.scss"; -> packages/utils/scss/layout/index.import.scss
// #region @import "./_aspect-ratio.scss"; -> packages/utils/scss/layout/_aspect-ratio.scss
// TODO DOCS

$kendo-utils-aspect-ratio: map-get( $kendo-utils, "aspect-ratio" ) !default;

@include generate-utils( ratio, aspect-ratio, $kendo-utils-aspect-ratio );

// #endregion
// #region @import "./_display.scss"; -> packages/utils/scss/layout/_display.scss
/// @name .k-d-none
/// @description This is equivalent to `display: none;`. Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.
/// @group display

/// @name .k-d-block
/// @description This is equivalent to `display: block;`. The element generates a block element box, generating line breaks both before and after the element when in the normal flow.
/// @group display

/// @name .k-d-inline
/// @description This is equivalent to `display: inline;`. The element generates one or more inline element boxes that do not generate line breaks before or after themselves. In normal flow, the next element will be on the same line if there is space.
/// @group display

/// @name .k-d-inline-block
/// @description This is equivalent to `display: inline-block;`. The element generates a block element box that will be flowed with surrounding content as if it were a single inline box (behaving much like a replaced element would).
/// @group display

/// @name .k-d-flex
/// @description This is equivalent to `display: flex;`. The element behaves like a block element and lays out its content according to the flexbox model.
/// @group display

/// @name .k-d-inline-flex
/// @description This is equivalent to `display: inline-flex;`. The element behaves like an inline element and lays out its content according to the flexbox model.
/// @group display

/// @name .k-d-grid
/// @description This is equivalent to `display: grid`. It defines the element as a grid container and establishes a new grid formatting context for its contents.
/// @group display

/// @name .k-d-inline-grid
/// @description This is equivalent to `display: inline-grid`. It defines the element as a grid container and establishes a new grid formatting context for its contents.
/// @group display

/// @name .k-d-table
/// @description This is equivalent to `display: table;`. These elements behave like HTML `<table>` elements. It defines a block-level box.
/// @group display

/// @name .k-d-inline-table
/// @description This is equivalent to `display: inline-table;`. The inline-table value does not have a direct mapping in HTML. It behaves like an HTML `<table>` element, but as an inline box, rather than a block-level box. Inside the table box is a block-level context.
/// @group display

/// @name .k-d-list-item
/// @description This is equivalent to `display: list-item;`. These elements behave like HTML `<LI>` elements. It defines a block-level box.
/// @group display

$kendo-utils-display: map-get( $kendo-utils, "display" ) !default;

@include generate-utils( d, display, $kendo-utils-display );

// #endregion
// #region @import "./_float.scss"; -> packages/utils/scss/layout/_float.scss
// TODO DOCS

$kendo-utils-float: map-get( $kendo-utils, "float" ) !default;

@include generate-utils( float, float, $kendo-utils-float );

// #endregion
// #region @import "./_clear.scss"; -> packages/utils/scss/layout/_clear.scss
// TODO DOCS

$kendo-utils-clear: map-get( $kendo-utils, "clear" ) !default;

@include generate-utils( clear, clear, $kendo-utils-clear );

// #endregion
// #region @import "./_overflow.scss"; -> packages/utils/scss/layout/_overflow.scss
/// @name .k-overflow-auto
/// @description This is equivalent to `overflow: auto;`. Depends on the user agent. If content fits inside the padding box, it looks the same as visible, but still establishes a new block formatting context. Desktop browsers provide scrollbar if content overflows.
/// @group overflow

/// @name .k-overflow-hidden
/// @description This is equivalent to `overflow: hidden;`. Content is clipped if necessary to fit the padding box. No scrollbar is provided, and no support for allowing the user to scroll (such as by dragging or using a scroll wheel) is allowed. The content can be scrolled programmatically (for example, by setting the value of a property such as offsetLeft), so the element is still a scroll container.
/// @group overflow

/// @name .k-overflow-visible
/// @description This is equivalent to `overflow: visible;`. Content is not clipped and may be rendered outside the padding box.
/// @group overflow

/// @name .k-overflow-scroll
/// @description This is equivalent to `overflow: scroll;`. Content is clipped if necessary to fit the padding box. Browsers always display scrollbar whether or not any content is actually clipped, preventing scrollbar from appearing or disappearing as content changes. Printers may still print overflowing content.
/// @group overflow

/// @name .k-overflow-clip
/// @description This is equivalent to `overflow: clip;`. Like for hidden, the content is clipped to the element's padding box. The difference between clip and hidden is that the clip keyword also forbids all scrolling, including programmatic scrolling.
/// @group overflow

/// @name .k-overflow-x-auto
/// @description This is equivalent to `overflow-x: auto;`.
/// @group overflow

/// @name .k-overflow-x-hidden
/// @description This is equivalent to `overflow-x: hidden;`.
/// @group overflow

/// @name .k-overflow-x-visible
/// @description This is equivalent to `overflow-x: visible;`.
/// @group overflow

/// @name .k-overflow-x-scroll
/// @description This is equivalent to `overflow-x: scroll;`.
/// @group overflow

/// @name .k-overflow-x-clip
/// @description This is equivalent to `overflow-x: clip;`.
/// @group overflow

/// @name .k-overflow-y-auto
/// @description This is equivalent to `overflow-y: auto;`.
/// @group overflow

/// @name .k-overflow-y-hidden
/// @description This is equivalent to `overflow-y: hidden;`.
/// @group overflow

/// @name .k-overflow-y-visible
/// @description This is equivalent to `overflow-y: visible;`.
/// @group overflow

/// @name .k-overflow-y-scroll
/// @description This is equivalent to `overflow-y: scroll;`.
/// @group overflow

/// @name .k-overflow-y-clip
/// @description This is equivalent to `overflow-y: clip;`.
/// @group overflow

$kendo-utils-overflow: map-get( $kendo-utils, "overflow" ) !default;

@include generate-utils( overflow, overflow, $kendo-utils-overflow );

// #endregion
// #region @import "./_position.scss"; -> packages/utils/scss/layout/_position.scss
// TODO DOCS

$kendo-utils-position: map-get( $kendo-utils, "position" ) !default;

@include generate-utils( pos, position, $kendo-utils-position );

// Aliases
.#{$kendo-prefix}static { @extend .#{$kendo-prefix}pos-static !optional; }
.\!#{$kendo-prefix}static { @extend .\!#{$kendo-prefix}pos-static !optional; }
.#{$kendo-prefix}relative { @extend .#{$kendo-prefix}pos-relative !optional; }
.\!#{$kendo-prefix}relative { @extend .\!#{$kendo-prefix}pos-relative !optional; }
.#{$kendo-prefix}absolute { @extend .#{$kendo-prefix}pos-absolute !optional; }
.\!#{$kendo-prefix}absolute { @extend .\!#{$kendo-prefix}pos-absolute !optional; }
.#{$kendo-prefix}fixed { @extend .#{$kendo-prefix}pos-fixed !optional; }
.\!#{$kendo-prefix}fixed { @extend .\!#{$kendo-prefix}pos-fixed !optional; }
.#{$kendo-prefix}sticky { @extend .#{$kendo-prefix}pos-sticky !optional; }
.\!#{$kendo-prefix}sticky { @extend .\!#{$kendo-prefix}pos-sticky !optional; }


// TODO DOCS

$kendo-utils-inset: map-get( $kendo-utils, "inset" ) !default;

@include generate-utils( inset, inset, $kendo-utils-inset );
@include generate-utils( inset-x, inset-inline, $kendo-utils-inset );
@include generate-utils( inset-y, inset-block, $kendo-utils-inset );
@include generate-utils( top, top, $kendo-utils-inset );
@include generate-utils( right, right, $kendo-utils-inset );
@include generate-utils( bottom, bottom, $kendo-utils-inset );
@include generate-utils( left, left, $kendo-utils-inset );
@include generate-utils( top-left, ( top, left ), $kendo-utils-inset );
@include generate-utils( top-right, ( top, right ), $kendo-utils-inset );
@include generate-utils( bottom-left, ( bottom, left ), $kendo-utils-inset );
@include generate-utils( bottom-right, ( bottom, right), $kendo-utils-inset );

.#{$kendo-prefix}top-start,
.#{$kendo-prefix}pos-top-start {
    top: 0;
    left: 0;
}

.#{$kendo-prefix}top-end,
.#{$kendo-prefix}pos-top-end {
    top: 0;
    right: 0;
}

.#{$kendo-prefix}bottom-start,
.#{$kendo-prefix}pos-bottom-start {
    bottom: 0;
    left: 0;
}

.#{$kendo-prefix}bottom-end,
.#{$kendo-prefix}pos-bottom-end {
    bottom: 0;
    right: 0;
}

.#{$kendo-prefix}top-center,
.#{$kendo-prefix}pos-top-center {
    top: 0;
    left: 50%;
    transform: translateX(-50%);
}
.#{$kendo-prefix}middle-left,
.#{$kendo-prefix}middle-start,
.#{$kendo-prefix}pos-middle-start {
    top: 50%;
    left: 0;
    transform: translateY(-50%);
}
.#{$kendo-prefix}middle-center {
    top: 50%;
    left: 50%;
    transform: translateY(-50%);
}
.#{$kendo-prefix}middle-right,
.#{$kendo-prefix}middle-end,
.#{$kendo-prefix}pos-middle-end {
    top: 50%;
    right: 0;
    transform: translateY(-50%);
}
.#{$kendo-prefix}bottom-center,
.#{$kendo-prefix}pos-bottom-center {
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
}


@each $side in (top, right, bottom, left) {
    .#{$kendo-prefix}#{$side},
    .#{$kendo-prefix}pos-#{$side} { #{$side}: 0; } // sass-lint:disable-line brace-style
}

// #endregion
// #region @import "./_visibility.scss"; -> packages/utils/scss/layout/_visibility.scss
// TODO DOCS

$kendo-utils-visibility: map-get( $kendo-utils, "visibility" ) !default;

@include generate-utils( visibility, visibility, $kendo-utils-visibility );

// Aliases
.#{$kendo-prefix}visible { @extend .#{$kendo-prefix}visibility-visible !optional; }
.\!#{$kendo-prefix}visible { @extend .\!#{$kendo-prefix}visibility-visible !optional; }
.#{$kendo-prefix}invisible { @extend .#{$kendo-prefix}visibility-hidden !optional; }
.\!#{$kendo-prefix}invisible { @extend .\!#{$kendo-prefix}visibility-hidden !optional; }

// #endregion
// #region @import "./_zindex.scss"; -> packages/utils/scss/layout/_zindex.scss
// TODO DOCS

$kendo-utils-zindex: map-get( $kendo-utils, "zindex" ) !default;

@include generate-utils( z, z-index, $kendo-utils-zindex );

// #endregion

// #endregion
// #region @import "./flex-grid/index.import.scss"; -> packages/utils/scss/flex-grid/index.import.scss
// #region @import "./_flex-direction.scss"; -> packages/utils/scss/flex-grid/_flex-direction.scss
/// @name .k-flex-row
/// @description This is equivalent to `flex-direction: row`. This establishes the main-axis to be horizontal, thus defining the direction flex items are placed in the flex container: left to right in `ltr`; right to left in `rtl`.
/// @group flex-direction

/// @name .k-flex-row-reverse
/// @description This is equivalent to `flex-direction: row-reverse`. This establishes the main-axis to be horizontal, thus defining the direction flex items are placed in the flex container: right to left in `ltr`; left to right in `rtl`.
/// @group flex-direction

/// @name .k-flex-col
/// @description This is equivalent to `flex-direction: column`. This establishes the main-axis to be vertical, thus defining the direction flex items are placed in the flex container: top to bottom.
/// @group flex-direction

/// @name .k-flex-col-reverse
/// @description This is equivalent to `flex-direction: column-reverse`. This establishes the main-axis to be vertical, thus defining the direction flex items are placed in the flex container: bottom to top.
/// @group flex-direction

$kendo-utils-flex-direction: map-get( $kendo-utils, "flex-direction" ) !default;

@include generate-utils( flex, flex-direction, $kendo-utils-flex-direction );

// #endregion
// #region @import "./_flex-wrap.scss"; -> packages/utils/scss/flex-grid/_flex-wrap.scss
/// @name .k-flex-wrap
/// @description This is equivalent to `flex-wrap: wrap`. It allows flex items to wrap as needed onto multiple lines, from top to bottom.
/// @group flex-wrap

/// @name .k-flex-nowrap
/// @description This is equivalent to `flex-wrap: nowrap`. All flex items will be on one line.
/// @group flex-wrap

/// @name .k-flex-wrap-reverse
/// @description This is equivalent to `flex-wrap: wrap-reverse`. It allows flex items to wrap as needed onto multiple lines, from bottom to top.
/// @group flex-wrap

$kendo-utils-flex-wrap: map-get( $kendo-utils, "flex-wrap" ) !default;

@include generate-utils( flex, flex-wrap, $kendo-utils-flex-wrap );

// #endregion
// #region @import "./_flex.scss"; -> packages/utils/scss/flex-grid/_flex.scss
/// @name .k-flex-1
/// @description This is equivalent to `flex: 1 1 0%`. It sizes the item not based on its `width`/`height` properties, but based on the available space. This is similar to `flex: 1 1 auto` except it is allowed to shrink beyond its initial size.
/// @group flex

/// @name .k-flex-auto
/// @description This is equivalent to `flex: 1 1 auto`. Beware, this is not the default value. It sizes the item based on its `width`/`height` properties, but makes it fully flexible so that they absorb any extra space along the main axis. If all items are either `flex: auto`, `flex: initial`, or `flex: none`, any remaining space after the items have been sized will be distributed evenly to the items with `flex: auto`.
/// @group flex

/// @name .k-flex-initial
/// @description This is the same as `flex: initial;` and the shorthand for the default value: `flex: 0 1 auto`. It sizes the item based on its `width`/`height` properties (or its content if not set). It makes the flex item inflexible when there is some free space left, but allows it to shrink to its minimum when there is not enough space. The alignment abilities or `auto` margins can be used to align flex items along the main axis.
/// @group flex

/// @name .k-flex-none
/// @description This is equivalent to `flex: 0 0 auto`. It sizes the item according to its `width`/`height` properties, but makes it fully inflexible. This is similar to `flex: initial` except it is not allowed to shrink, even in an overflow situation.
/// @group flex

$kendo-utils-flex: map-get( $kendo-utils, "flex" ) !default;

@include generate-utils( flex, flex, $kendo-utils-flex );

// #endregion
// #region @import "./_flex-grow.scss"; -> packages/utils/scss/flex-grid/_flex-grow.scss
/// @name .k-flex-grow
/// @description This is equivalent to `flex-grow: 1`. It defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
/// @group flex-grow

/// @name .k-flex-grow-0
/// @description This is equivalent to `flex-grow: 0`. The item will not grow.
/// @group flex-grow

$kendo-utils-flex-grow: map-get( $kendo-utils, "flex-grow" ) !default;

@include generate-utils( grow, flex-grow, $kendo-utils-flex-grow );
@include generate-utils( flex-grow, flex-grow, $kendo-utils-flex-grow );

// #endregion
// #region @import "./_flex-shrink.scss"; -> packages/utils/scss/flex-grid/_flex-shrink.scss
/// @name .k-flex-shrink
/// @description This is equivalent to `flex-shrink: 1`. It determines how much the flex item will shrink relative to the rest of the flex items in the flex container when there isn't enough space on the row.
/// @group flex-shrink

/// @name .k-flex-shrink-0
/// @description This is equivalent to `flex-shrink: 0`. The item will not shrink.
/// @group flex-shrink

$kendo-utils-flex-shrink: map-get( $kendo-utils, "flex-shrink" ) !default;

@include generate-utils( shrink, flex-shrink, $kendo-utils-flex-shrink );
@include generate-utils( flex-shrink, flex-shrink, $kendo-utils-flex-shrink );

// #endregion
// #region @import "./_flex-basis.scss"; -> packages/utils/scss/flex-grid/_flex-basis.scss
/// @name .k-flex-basis-auto
/// @description This is equivalent to `flex-basis: auto`. It specifies the initial size of the flex item, before any available space is distributed according to the flex factors. It sizes the element according to its size property.
/// @group flex-basis

// TODO DOCS

/// @name .k-flex-basis-0
/// @description This is equivalent to `flex-basis: 0`. It specifies the initial size of the flex item, before any available space is distributed according to the flex factors. It disregards the element' size property.
/// @group flex-basis

$kendo-utils-flex-basis: map-get( $kendo-utils, "flex-basis" ) !default;

@include generate-utils( basis, flex-basis, $kendo-utils-flex-basis );
@include generate-utils( flex-basis, flex-basis, $kendo-utils-flex-basis );

// #endregion
// #region @import "./_order.scss"; -> packages/utils/scss/flex-grid/_order.scss
// TODO DOCS

$kendo-utils-order: map-get( $kendo-utils, "order" ) !default;

@include generate-utils( order, order, $kendo-utils-order );

// #endregion
// #region @import "./_grid-template-columns.scss"; -> packages/utils/scss/flex-grid/_grid-template-columns.scss
// TODO DOCS

$kendo-utils-grid-template-columns: map-get( $kendo-utils, "grid-template-columns" ) !default;

@include generate-utils( grid-cols, grid-template-columns, $kendo-utils-grid-template-columns );

// #endregion
// #region @import "./_grid-template-rows.scss"; -> packages/utils/scss/flex-grid/_grid-template-rows.scss
// TODO DOCS

$kendo-utils-grid-template-rows: map-get( $kendo-utils, "grid-template-rows" ) !default;

@include generate-utils( grid-rows, grid-template-rows, $kendo-utils-grid-template-rows );

// #endregion
// #region @import "./_grid-column-start-end.scss"; -> packages/utils/scss/flex-grid/_grid-column-start-end.scss
// TODO DOCS

$kendo-utils-grid-column-start: map-get( $kendo-utils, "grid-column-start" ) !default;

@include generate-utils( col-start, grid-column-start, $kendo-utils-grid-column-start );


$kendo-utils-grid-column-end: map-get( $kendo-utils, "grid-column-end" ) !default;

@include generate-utils( col-end, grid-column-end, $kendo-utils-grid-column-end );


$kendo-utils-grid-column-span: map-get( $kendo-utils, "grid-column-span" ) !default;

@include generate-utils( col-span, grid-column, $kendo-utils-grid-column-span );
@include generate-utils( colspan, grid-column, $kendo-utils-grid-column-span );

// #endregion
// #region @import "./_grid-row-start-end.scss"; -> packages/utils/scss/flex-grid/_grid-row-start-end.scss
// TODO DOCS

$kendo-utils-grid-row-start: map-get( $kendo-utils, "grid-row-start" ) !default;

@include generate-utils( row-start, grid-row-start, $kendo-utils-grid-row-start );


$kendo-utils-grid-row-end: map-get( $kendo-utils, "grid-row-end" ) !default;

@include generate-utils( row-end, grid-row-end, $kendo-utils-grid-row-end );


$kendo-utils-grid-row-span: map-get( $kendo-utils, "grid-row-span" ) !default;

@include generate-utils( row-span, grid-row, $kendo-utils-grid-row-span );

// #endregion
// #region @import "./_grid-auto-flow.scss"; -> packages/utils/scss/flex-grid/_grid-auto-flow.scss
// TODO DOCS

$kendo-utils-grid-auto-flow: map-get( $kendo-utils, "grid-auto-flow" ) !default;

@include generate-utils( grid-flow, grid-auto-flow, $kendo-utils-grid-auto-flow );

// #endregion
// #region @import "./_grid-auto-columns.scss"; -> packages/utils/scss/flex-grid/_grid-auto-columns.scss
// TODO DOCS

$kendo-utils-grid-auto-columns: map-get( $kendo-utils, "grid-auto-columns" ) !default;

@include generate-utils( grid-auto-cols, grid-auto-columns, $kendo-utils-grid-auto-columns );

// #endregion
// #region @import "./_grid-auto-rows.scss"; -> packages/utils/scss/flex-grid/_grid-auto-rows.scss
// TODO DOCS

$kendo-utils-grid-auto-rows: map-get( $kendo-utils, "grid-auto-rows" ) !default;

@include generate-utils( grid-auto-rows, grid-auto-rows, $kendo-utils-grid-auto-rows );

// #endregion
// #region @import "./_gap.scss"; -> packages/utils/scss/flex-grid/_gap.scss
// TODO DOCS

$kendo-utils-gap: map-get( $kendo-utils, "gap" ) !default;

@include generate-utils( gap, gap, $kendo-utils-gap );
@include generate-utils( gap-x, column-gap, $kendo-utils-gap );
@include generate-utils( gap-y, row-gap, $kendo-utils-gap );

// #endregion
// #region @import "./_align-content.scss"; -> packages/utils/scss/flex-grid/_align-content.scss
// TODO DOCS

$kendo-utils-align-content: map-get( $kendo-utils, "align-content" ) !default;

@include generate-utils( align-content, align-content, $kendo-utils-align-content );

// #endregion
// #region @import "./_align-items.scss"; -> packages/utils/scss/flex-grid/_align-items.scss
// TODO DOCS

$kendo-utils-align-items: map-get( $kendo-utils, "align-items" ) !default;

@include generate-utils( align-items, align-items, $kendo-utils-align-items );

// #endregion
// #region @import "./_align-self.scss"; -> packages/utils/scss/flex-grid/_align-self.scss
// TODO DOCS

$kendo-utils-align-self: map-get( $kendo-utils, "align-self" ) !default;

@include generate-utils( align-self, align-self, $kendo-utils-align-self );

// #endregion
// #region @import "./_justify-content.scss"; -> packages/utils/scss/flex-grid/_justify-content.scss
// TODO DOCS

$kendo-utils-justify-content: map-get( $kendo-utils, "justify-content" ) !default;

@include generate-utils( justify-content, justify-content, $kendo-utils-justify-content );

.#{$kendo-prefix}justify-content-stretch > * { flex: 1 0 0%; }
.\!.#{$kendo-prefix}justify-content-stretch > * { flex: 1 0 0% !important; } // sass-lint:disable-line no-important class-name-format

// #endregion
// #region @import "./_justify-items.scss"; -> packages/utils/scss/flex-grid/_justify-items.scss
// TODO DOCS

$kendo-utils-justify-items: map-get( $kendo-utils, "justify-items" ) !default;

@include generate-utils( justify-items, justify-items, $kendo-utils-justify-items );

// #endregion
// #region @import "./_justify-self.scss"; -> packages/utils/scss/flex-grid/_justify-self.scss
// TODO DOCS

$kendo-utils-justify-self: map-get( $kendo-utils, "justify-self" ) !default;

@include generate-utils( justify-self, justify-self, $kendo-utils-justify-self );

// #endregion
// #region @import "./_place-content.scss"; -> packages/utils/scss/flex-grid/_place-content.scss
// TODO DOCS

$kendo-utils-place-content: map-get( $kendo-utils, "place-content" ) !default;

@include generate-utils( place-content, place-content, $kendo-utils-place-content );

// #endregion
// #region @import "./_place-items.scss"; -> packages/utils/scss/flex-grid/_place-items.scss
// TODO DOCS

$kendo-utils-place-items: map-get( $kendo-utils, "place-items" ) !default;

@include generate-utils( place-items, place-items, $kendo-utils-place-items );

// #endregion
// #region @import "./_place-self.scss"; -> packages/utils/scss/flex-grid/_place-self.scss
// TODO DOCS

$kendo-utils-place-self: map-get( $kendo-utils, "place-self" ) !default;

@include generate-utils( place-self, place-self, $kendo-utils-place-self );

// #endregion

// #endregion
// #region @import "./spacing/index.import.scss"; -> packages/utils/scss/spacing/index.import.scss
// #region @import "./_margin.scss"; -> packages/utils/scss/spacing/_margin.scss
// TODO DOCS

$kendo-utils-margin: map-get( $kendo-utils, "margin" ) !default;

@include generate-utils( m, margin, $kendo-utils-margin );
@include generate-utils( mt, margin-top, $kendo-utils-margin );
@include generate-utils( mr, margin-right, $kendo-utils-margin );
@include generate-utils( mb, margin-bottom, $kendo-utils-margin );
@include generate-utils( ml, margin-left, $kendo-utils-margin );
@include generate-utils( mx, margin-inline, $kendo-utils-margin );
@include generate-utils( my, margin-block, $kendo-utils-margin );

// #endregion
// #region @import "./_padding.scss"; -> packages/utils/scss/spacing/_padding.scss
// TODO DOCS

$kendo-utils-padding: map-get( $kendo-utils, "padding" ) !default;

@include generate-utils( p, padding, $kendo-utils-padding );
@include generate-utils( pt, padding-top, $kendo-utils-padding );
@include generate-utils( pr, padding-right, $kendo-utils-padding );
@include generate-utils( pb, padding-bottom, $kendo-utils-padding );
@include generate-utils( pl, padding-left, $kendo-utils-padding );
@include generate-utils( px, padding-inline, $kendo-utils-padding );
@include generate-utils( py, padding-block, $kendo-utils-padding );

// #endregion
// #region @import "./_space-between.scss"; -> packages/utils/scss/spacing/_space-between.scss

// #endregion

// #endregion
// #region @import "./sizing/index.import.scss"; -> packages/utils/scss/sizing/index.import.scss
// #region @import "./_width.scss"; -> packages/utils/scss/sizing/_width.scss
// TODO DOCS

$kendo-utils-width: map-get( $kendo-utils, "width" ) !default;

@include generate-utils( w, width, $kendo-utils-width );


$kendo-utils-min-width: map-get( $kendo-utils, "min-width" ) !default;

@include generate-utils( min-w, min-width, $kendo-utils-min-width );


$kendo-utils-max-width: map-get( $kendo-utils, "max-width" ) !default;

@include generate-utils( max-w, max-width, $kendo-utils-max-width );

// #endregion
// #region @import "./_height.scss"; -> packages/utils/scss/sizing/_height.scss
// TODO DOCS

$kendo-utils-height: map-get( $kendo-utils, "height" ) !default;

@include generate-utils( h, height, $kendo-utils-height );


$kendo-utils-min-height: map-get( $kendo-utils, "min-height" ) !default;

@include generate-utils( min-h, min-height, $kendo-utils-min-height );


$kendo-utils-max-height: map-get( $kendo-utils, "max-height" ) !default;

@include generate-utils( max-h, max-height, $kendo-utils-max-height );

// #endregion

// #endregion
// #region @import "./typography/index.import.scss"; -> packages/utils/scss/typography/index.import.scss
// font family
// #region @import "./_font-size.scss"; -> packages/utils/scss/typography/_font-size.scss
// TODO DOCS

$kendo-utils-font-size: map-get( $kendo-utils, "font-size" ) !default;

@include generate-utils( font-size, font-size, $kendo-utils-font-size );

// #endregion
// font smoothing
// #region @import "./_font-style.scss"; -> packages/utils/scss/typography/_font-style.scss
// TODO DOCS

$kendo-utils-font-style: map-get( $kendo-utils, "font-style" ) !default;

@include generate-utils( font, font-style, $kendo-utils-font-style );

// #endregion
// #region @import "./_font-weight.scss"; -> packages/utils/scss/typography/_font-weight.scss
// TODO DOCS

$kendo-utils-font-weight: map-get( $kendo-utils, "font-weight" ) !default;

@include generate-utils( font, font-weight, $kendo-utils-font-weight );

// #endregion
// font variant
// letter spacing
// line height
// list style
// #region @import "./_text-align.scss"; -> packages/utils/scss/typography/_text-align.scss
/// @name .k-text-left
/// @description This is equivalent to `text-align: left;`. The inline contents are aligned to the left edge of the line box.
/// @group text-align

/// @name .k-text-right
/// @description This is equivalent to `text-align: right;`. The inline contents are aligned to the right edge of the line box.
/// @group text-align

/// @name .k-text-center
/// @description This is equivalent to `text-align: center;`. The inline contents are centered within the line box.
/// @group text-align

/// @name .k-text-justify
/// @description This is equivalent to `text-align: justify;`. The inline contents are justified. Text should be spaced to line up its left and right edges to the left and right edges of the line box, except for the last line.
/// @group text-align

$kendo-utils-text-align: map-get( $kendo-utils, "text-align" ) !default;

@include generate-utils( text, text-align, $kendo-utils-text-align );

// #endregion
// text color
// text decoration
// #region @import "./_text-transform.scss"; -> packages/utils/scss/typography/_text-transform.scss
// TODO DOCS

/// @name k-text-lowercase
/// @description This is equivalent to `text-transform: lowercase;`. Is a keyword that converts all characters to lowercase.
/// @group text-transform

/// @name k-text-uppercase
/// @description This is equivalent to `text-transform: uppercase;`. Is a keyword that converts all characters to uppercase.
/// @group text-transform

/// @name k-text-capitalize
/// @description This is equivalent to `text-transform: capitalize;`. Is a keyword that converts the first letter of each word to uppercase. Other characters remain unchanged (they retain their original case as written in the element's text).
/// @group text-transform

$kendo-utils-text-transform: map-get( $kendo-utils, "text-transform" ) !default;

@include generate-utils( text, text-transform, $kendo-utils-text-transform );

// #endregion
// text overflow
// text indent
// vertical align
// #region @import "./_white-space.scss"; -> packages/utils/scss/typography/_white-space.scss
/// @name .k-white-space-normal
/// @description This is equivalent to `white-space: normal;`. Sequences of white space are collapsed. Newline characters in the source are handled the same as other white space. Lines are broken as necessary to fill line boxes.
/// @group white-space

/// @name .k-white-space-nowrap
/// @description This is equivalent to `white-space: nowrap;`. Collapses white space as for normal, but suppresses line breaks (text wrapping) within the source.
/// @group white-space

/// @name .k-white-space-pre
/// @description This is equivalent to `white-space: pre;`. Sequences of white space are preserved. Lines are only broken at newline characters in the source and at <br> elements.
/// @group white-space

/// @name .k-white-space-pre-wrap
/// @description This is equivalent to `white-space: pre-wrap;`. Sequences of white space are preserved. Lines are broken at newline characters, at <br>, and as necessary to fill line boxes.
/// @group white-space

/// @name .k-white-space-pre-line
/// @description This is equivalent to `white-space: pre-line;`. Sequences of white space are collapsed. Lines are broken at newline characters, at <br>, and as necessary to fill line boxes.
/// @group white-space

/// @name .k-white-space-break-spaces
/// @description This is equivalent to `white-space: break-spaces;`. Collapses white space as for normal, but suppresses line breaks (text wrapping) within the source.
/// @group white-space

$kendo-utils-white-space: map-get( $kendo-utils, "white-space" ) !default;

@include generate-utils( white-space, white-space, $kendo-utils-white-space );

// #endregion

// #endregion
// background
// #region @import "./border/index.import.scss"; -> packages/utils/scss/border/index.import.scss
// #region @import "./_border-width.scss"; -> packages/utils/scss/border/_border-width.scss
// TODO DOCS

$kendo-utils-border-width: map-get( $kendo-utils, "border-width" ) !default;

@include generate-utils( border, border-width, $kendo-utils-border-width );
@include generate-utils( border-t, border-top-width, $kendo-utils-border-width );
@include generate-utils( border-r, border-right-width, $kendo-utils-border-width );
@include generate-utils( border-b, border-bottom-width, $kendo-utils-border-width );
@include generate-utils( border-l, border-left-width, $kendo-utils-border-width );
@include generate-utils( border-x, border-inline-width, $kendo-utils-border-width );
@include generate-utils( border-y, border-block-width, $kendo-utils-border-width );

// #endregion
// #region @import "./_border-style.scss"; -> packages/utils/scss/border/_border-style.scss
// TODO DOCS

$kendo-utils-border-style: map-get( $kendo-utils, "border-style" ) !default;

@include generate-utils( border, border-style, $kendo-utils-border-style );
@include generate-utils( border-t, border-top-style, $kendo-utils-border-style );
@include generate-utils( border-r, border-right-style, $kendo-utils-border-style );
@include generate-utils( border-b, border-bottom-style, $kendo-utils-border-style );
@include generate-utils( border-l, border-left-style, $kendo-utils-border-style );
@include generate-utils( border-x, border-inline-style, $kendo-utils-border-style );
@include generate-utils( border-y, border-block-style, $kendo-utils-border-style );

// #endregion
// #region @import "./_border-color.scss"; -> packages/utils/scss/border/_border-color.scss
// TODO DOCS

$kendo-utils-border-color: map-get( $kendo-utils, "border-color" ) !default;

@include generate-utils( border, border-color, $kendo-utils-border-color );
@include generate-utils( border-t, border-top-color, $kendo-utils-border-color );
@include generate-utils( border-r, border-right-color, $kendo-utils-border-color );
@include generate-utils( border-b, border-bottom-color, $kendo-utils-border-color );
@include generate-utils( border-l, border-left-color, $kendo-utils-border-color );
@include generate-utils( border-x, border-inline-color, $kendo-utils-border-color );
@include generate-utils( border-y, border-block-color, $kendo-utils-border-color );

// #endregion
// #region @import "./_border-radius.scss"; -> packages/utils/scss/border/_border-radius.scss
// TODO DOCS

$kendo-utils-border-radius: map-get( $kendo-utils, "border-radius" ) !default;

@include generate-utils( rounded, border-radius, $kendo-utils-border-radius );
@include generate-utils( rounded-tl, border-top-left-radius, $kendo-utils-border-radius );
@include generate-utils( rounded-tr, border-top-right-radius, $kendo-utils-border-radius );
@include generate-utils( rounded-br, border-bottom-right-radius, $kendo-utils-border-radius );
@include generate-utils( rounded-bl, border-bottom-left-radius, $kendo-utils-border-radius );
@include generate-utils( rounded-t, ( border-top-left-radius, border-top-right-radius ), $kendo-utils-border-radius );
@include generate-utils( rounded-r, ( border-top-right-radius, border-bottom-right-radius ), $kendo-utils-border-radius );
@include generate-utils( rounded-b, ( border-bottom-left-radius, border-bottom-right-radius ), $kendo-utils-border-radius );
@include generate-utils( rounded-l, ( border-top-left-radius, border-bottom-left-radius ), $kendo-utils-border-radius );

// #endregion
// #region @import "./_outline-width.scss"; -> packages/utils/scss/border/_outline-width.scss
// TODO DOCS

$kendo-utils-outline-width: map-get( $kendo-utils, "outline-width" ) !default;

@include generate-utils( outline, outline-width, $kendo-utils-outline-width );

// #endregion
// #region @import "./_outline-style.scss"; -> packages/utils/scss/border/_outline-style.scss
// TODO DOCS

$kendo-utils-outline-style: map-get( $kendo-utils, "outline-style" ) !default;

@include generate-utils( outline, outline-style, $kendo-utils-outline-style );

// #endregion
// #region @import "./_outline-color.scss"; -> packages/utils/scss/border/_outline-color.scss
// TODO DOCS

$kendo-utils-outline-color: map-get( $kendo-utils, "outline-color" ) !default;

@include generate-utils( outline, outline-color, $kendo-utils-outline-color );

// #endregion
// #region @import "./_outline-offset.scss"; -> packages/utils/scss/border/_outline-offset.scss
// TODO DOCS

$kendo-utils-outline-offset: map-get( $kendo-utils, "outline-offset" ) !default;

@include generate-utils( outline-offset, outline-offset, $kendo-utils-outline-offset );

// #endregion

// #endregion
// effects
// filter
// #region @import "./table/index.import.scss"; -> packages/utils/scss/table/index.import.scss
// #region @import "./_border-collapse.scss"; -> packages/utils/scss/table/_border-collapse.scss
// TODO DOCS

$kendo-utils-border-collapse: map-get( $kendo-utils, "border-collapse" ) !default;

@include generate-utils( border, border-collapse, $kendo-utils-border-collapse );

// #endregion
// #region @import "./_table-layout.scss"; -> packages/utils/scss/table/_table-layout.scss
/// @name .k-table-layout-auto
/// @description This is equivalent to `table-layout: auto;`. By default, most browsers use an automatic table layout algorithm. The widths of the table and its cells are adjusted to fit the content.
/// @group table-layout

/// @name .k-table-layout-fixed
/// @description This is equivalent to `table-layout: fixed;`. Table and column widths are set by the widths of table and col elements or by the width of the first row of cells. Cells in subsequent rows do not affect column widths.
/// @group table-layout

$kendo-utils-table-layout: map-get( $kendo-utils, "table-layout" ) !default;

@include generate-utils( table, table-layout, $kendo-utils-table-layout );
@include generate-utils( table-layout, table-layout, $kendo-utils-table-layout );

// #endregion

// #endregion
// transition
// #region @import "./transform/index.import.scss"; -> packages/utils/scss/transform/index.import.scss
// #region @import "./_flip.scss"; -> packages/utils/scss/transform/_flip.scss
/// @name .k-flip-h
/// @description This is equivalent to `transform: scaleX( -1 );`. Flips the element horizontally.
/// @group transform

/// @name .k-flip-v
/// @description This is equivalent to `transform: scaleY( -1 );`. Flips the element vertically.
/// @group transform

$kendo-utils-flip: map-get( $kendo-utils, "flip" ) !default;

@if $kendo-utils-flip {
    .#{$kendo-prefix}flip-h { transform: scaleX( -1 ); }
    .\!#{$kendo-prefix}flip-h { transform: scaleX( -1 ) !important; } // sass-lint:disable-line no-important
    .#{$kendo-prefix}flip-v { transform: scaleY( -1 ); }
    .\!#{$kendo-prefix}flip-v { transform: scaleY( -1 ) !important; } // sass-lint:disable-line no-important
    .#{$kendo-prefix}flip-h.#{$kendo-prefix}flip-v { transform: scale( -1, -1 ); }
    .\!#{$kendo-prefix}flip-h.\!#{$kendo-prefix}flip-v { transform: scale( -1, -1 ) !important; } // sass-lint:disable-line no-important

    // Aliases
    .#{$kendo-prefix}flip-x { @extend .#{$kendo-prefix}flip-h !optional; }
    .\!#{$kendo-prefix}flip-x { @extend .\!#{$kendo-prefix}flip-h !optional; }
    .#{$kendo-prefix}flip-y { @extend .#{$kendo-prefix}flip-v !optional; }
    .\!#{$kendo-prefix}flip-y { @extend .\!#{$kendo-prefix}flip-v !optional; }
}

// #endregion
// #region @import "./_scale.scss"; -> packages/utils/scss/transform/_scale.scss
// TODO DOCS

$kendo-utils-scale: map-get( $kendo-utils, "scale" ) !default;

// sass-lint:disable function-name-format
@function __scale( $val ) {
    @return scale( unquote($val) );
}
@function __scale-x( $val ) {
    @return scaleX( unquote($val) );
}
@function __scale-y( $val ) {
    @return scaleY( unquote($val) );
}
// sass-lint:enable function-name-format

@include generate-utils( scale, transform, $kendo-utils-scale, __scale );
@include generate-utils( scale-x, transform, $kendo-utils-scale, __scale-x );
@include generate-utils( scale-y, transform, $kendo-utils-scale, __scale-y );

// #endregion
// #region @import "./_rotate.scss"; -> packages/utils/scss/transform/_rotate.scss
// TODO DOCS

$kendo-utils-rotate: map-get( $kendo-utils, "rotate" ) !default;

// sass-lint:disable function-name-format
@function __rotate( $val ) {
    @return rotate( $val );
}
// sass-lint:enable function-name-format

@include generate-utils( rotate, transform, $kendo-utils-rotate, __rotate );

// #endregion
// #region @import "./_translate.scss"; -> packages/utils/scss/transform/_translate.scss
// TODO DOCS

$kendo-utils-translate: map-get( $kendo-utils, "translate" ) !default;

// sass-lint:disable function-name-format
@function __translate-x( $val ) {
    @return translateX( $val );
}
@function __translate-y( $val ) {
    @return translateY( $val );
}
// sass-lint:enable function-name-format

@include generate-utils( translate-x, transform, $kendo-utils-translate, __translate-x );
@include generate-utils( translate-y, transform, $kendo-utils-translate, __translate-y );

// #endregion
// #region @import "./_skew.scss"; -> packages/utils/scss/transform/_skew.scss
// TODO DOCS

$kendo-utils-skew: map-get( $kendo-utils, "skew" ) !default;

// sass-lint:disable function-name-format
@function __skew-x( $val ) {
    @return skewX( $val );
}
@function __skew-y( $val ) {
    @return skewY( $val );
}
// sass-lint:enable function-name-format

@include generate-utils( skew-x, transform, $kendo-utils-skew, __skew-x );
@include generate-utils( skew-y, transform, $kendo-utils-skew, __skew-y );

// #endregion
// #region @import "./_origin.scss"; -> packages/utils/scss/transform/_origin.scss
// TODO DOCS

$kendo-utils-origin: map-get( $kendo-utils, "origin" ) !default;

@include generate-utils( origin, transform-origin, $kendo-utils-origin );

// #endregion

// #endregion
// #region @import "./interactivity/index.import.scss"; -> packages/utils/scss/interactivity/index.import.scss
// #region @import "./_accent-color.scss"; -> packages/utils/scss/interactivity/_accent-color.scss
// TODO DOCS

$kendo-utils-accent-color: map-get( $kendo-utils, "accent-color" ) !default;

@include generate-utils( accent-color, accent-color, $kendo-utils-accent-color );

// #endregion
// #region @import "./_appearance.scss"; -> packages/utils/scss/interactivity/_appearance.scss
/// @name .k-appearance-none
/// @description This is equivalent to `appearance: none;`. Resets any browser specific styling on an element.
/// @group appearance

/// @name .k-appearance-auto
/// @description This is equivalent to `appearance: auto;`. The user agent selects the appropriate special styling based on the element. Acts as `none` on elements with no special styling.
/// @group appearance

$kendo-utils-appearance: map-get( $kendo-utils, "appearance" ) !default;

@include generate-utils( appearance, appearance, $kendo-utils-appearance );

// #endregion
// #region @import "./_cursor.scss"; -> packages/utils/scss/interactivity/_cursor.scss
// TODO DOCS

$kendo-utils-cursor: map-get( $kendo-utils, "cursor" ) !default;

@include generate-utils( cursor, cursor, $kendo-utils-cursor );

// #endregion
// #region @import "./_caret-color.scss"; -> packages/utils/scss/interactivity/_caret-color.scss
// TODO DOCS

$kendo-utils-caret-color: map-get( $kendo-utils, "caret-color" ) !default;

@include generate-utils( caret, caret-color, $kendo-utils-caret-color );

// #endregion
// #region @import "./_pointer-events.scss"; -> packages/utils/scss/interactivity/_pointer-events.scss
/// @name .k-pointer-events-none
/// @description This is equivalent to `pointer-events: none;`. The element is never the target of pointer events; however, pointer events may target its descendant elements if those descendants have pointer-events set to some other value. In these circumstances, pointer events will trigger event listeners on this parent element as appropriate on their way to/from the descendant during the event capture/bubble phases.
/// @group pointer-events

/// @name .k-pointer-events-auto
/// @description This is equivalent to `pointer-events: auto;`. The element behaves as it would if the pointer-events property were not specified. In SVG content, this value and the value visiblePainted have the same effect.
/// @group pointer-events

$kendo-utils-pointer-events: map-get( $kendo-utils, "pointer-events" ) !default;

@include generate-utils( pointer-events, pointer-events, $kendo-utils-pointer-events );

// #endregion
// #region @import "./_resize.scss"; -> packages/utils/scss/interactivity/_resize.scss
/// @name .k-resize
/// @description This is equivalent to `resize: both;`. The element displays a mechanism for allowing the user to resize it, which may be resized both horizontally and vertically.
/// @group resize

/// @name .k-resize-none
/// @description This is equivalent to `resize: none;`. The element offers no user-controllable method for resizing it.
/// @group resize

/// @name .k-resize-x
/// @description This is equivalent to `resize: horizontal;`. The element displays a mechanism for allowing the user to resize it in the horizontal direction.
/// @group resize

/// @name .k-resize-y
/// @description This is equivalent to `resize: vertical;`. The element displays a mechanism for allowing the user to resize it in the vertical direction.
/// @group resize

$kendo-utils-resize: map-get( $kendo-utils, "resize" ) !default;

@include generate-utils( resize, resize, $kendo-utils-resize );

// #endregion
// #region @import "./_scroll.scss"; -> packages/utils/scss/interactivity/_scroll.scss
// TODO DOCS

$kendo-utils-scroll-behavior: map-get( $kendo-utils, "scroll-behavior" ) !default;

@include generate-utils( scroll, scroll-behavior, $kendo-utils-scroll-behavior );


$kendo-utils-scroll-snap-type: map-get( $kendo-utils, "scroll-snap-type" ) !default;

@include generate-utils( scroll-snap, scroll-snap-type, $kendo-utils-scroll-snap-type );

.#{$kendo-prefix}scroll-snap-mandatory { #{--#{$kendo-prefix}scroll-snap-strictness}: mandatory; }
.#{$kendo-prefix}scroll-snap-proximity { #{--#{$kendo-prefix}scroll-snap-strictness}: proximity; }


$kendo-utils-scroll-snap-stop: map-get( $kendo-utils, "scroll-snap-stop" ) !default;

@include generate-utils( scroll-snap-stop, scroll-snap-stop, $kendo-utils-scroll-snap-stop );


$kendo-utils-scroll-snap-align: map-get( $kendo-utils, "scroll-snap-align" ) !default;

@include generate-utils( scroll-snap-align, scroll-snap-align, $kendo-utils-scroll-snap-align );


$kendo-utils-scroll-margin: map-get( $kendo-utils, "scroll-margin" ) !default;

@include generate-utils( scroll-m, scroll-margin, $kendo-utils-scroll-margin );
@include generate-utils( scroll-mt, scroll-margin-top, $kendo-utils-scroll-margin );
@include generate-utils( scroll-mr, scroll-margin-right, $kendo-utils-scroll-margin );
@include generate-utils( scroll-mb, scroll-margin-bottom, $kendo-utils-scroll-margin );
@include generate-utils( scroll-ml, scroll-margin-left, $kendo-utils-scroll-margin );
@include generate-utils( scroll-mx, scroll-margin-inline, $kendo-utils-scroll-margin );
@include generate-utils( scroll-my, scroll-margin-block, $kendo-utils-scroll-margin );


$kendo-utils-scroll-padding: map-get( $kendo-utils, "scroll-padding" ) !default;

@include generate-utils( scroll-p, scroll-padding, $kendo-utils-scroll-padding );
@include generate-utils( scroll-pt, scroll-padding-top, $kendo-utils-scroll-padding );
@include generate-utils( scroll-pr, scroll-padding-right, $kendo-utils-scroll-padding );
@include generate-utils( scroll-pb, scroll-padding-bottom, $kendo-utils-scroll-padding );
@include generate-utils( scroll-pl, scroll-padding-left, $kendo-utils-scroll-padding );
@include generate-utils( scroll-px, scroll-padding-inline, $kendo-utils-scroll-padding );
@include generate-utils( scroll-py, scroll-padding-block, $kendo-utils-scroll-padding );

// #endregion
// #region @import "./_touch-action.scss"; -> packages/utils/scss/interactivity/_touch-action.scss
// TODO DOCS

/// @name .k-touch-action-none
/// @description This is equivalent to `touch-action: none;`. Disable browser handling of all panning and zooming gestures.
/// @group touch-action

/// @name .k-touch-action-auto
/// @description This is equivalent to `touch-action: auto;`. Enable browser handling of all panning and zooming gestures.
/// @group touch-action

$kendo-utils-touch-action: map-get( $kendo-utils, "touch-action" ) !default;

@include generate-utils( touch-action, touch-action, $kendo-utils-touch-action );

// #endregion
// #region @import "./_user-select.scss"; -> packages/utils/scss/interactivity/_user-select.scss
/// @name .k-user-select-auto
/// @description This is equivalent to `user-select: auto;`. This is the default value of the `user-select` property.
/// @group user-select

/// @name .k-user-select-none
/// @description This is equivalent to `user-select: none;`. The text of the element and its sub-elements is not selectable. Note that the Selection object can contain these elements.
/// @group user-select

/// @name .k-user-select-text
/// @description This is equivalent to `user-select: text;`. The text can be selected by the user.
/// @group user-select

/// @name .k-user-select-all
/// @description This is equivalent to `user-select: all;`. The content of the element shall be selected atomically: If a selection would contain part of the element, then the selection must contain the entire element including all its descendants.  If a double-click or context-click occurred in sub-elements, the highest ancestor with this value will be selected.
/// @group user-select

/// @name .k-user-select-contain
/// @description This is equivalent to `user-select: contain;`. Enables selection to start within the element; however, the selection will be contained by the bounds of that element.
/// @group user-select

$kendo-utils-user-select: map-get( $kendo-utils, "user-select" ) !default;

@include generate-utils( user-select, user-select, $kendo-utils-user-select );

// #endregion
// #region @import "./_will-change.scss"; -> packages/utils/scss/interactivity/_will-change.scss
// TODO DOCS

$kendo-utils-will-change: map-get( $kendo-utils, "will-change" ) !default;

@include generate-utils( will-change, will-change, $kendo-utils-will-change );

// #endregion

// #endregion

// #endregion
