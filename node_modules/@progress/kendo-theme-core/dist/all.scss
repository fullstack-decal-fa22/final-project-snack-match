// This file is auto-generated. Do not edit!
// baka:source packages/core/scss/all.scss

// #region @import "./index.import.scss"; -> packages/core/scss/index.import.scss
// #region @import "./color-system/index.import.scss"; -> packages/core/scss/color-system/index.import.scss
// #region @import "./_functions.import.scss"; -> packages/core/scss/color-system/_functions.import.scss
@function k-generate-theme-variant( $variant, $matrix, $src-palette-name ) {
    $result: ();

    @each $ui-state, $indices in $matrix {
        $prefix: if( $ui-state == DEFAULT, "", "#{$ui-state}-" );
        $indices-count: k-list-length( $indices );

        $bg-prop: k-list-nth( $indices, 1 );
        $text-prop: k-list-nth( $indices, 2 );
        $border-prop: k-list-nth( $indices, 3 );
        $gradient-prop: if( $indices-count > 3, k-list-nth( $indices, 4 ), null );
        $shadow-prop: if( $indices-count > 4, k-list-nth( $indices, 5 ), null );
        $outline-prop: if( $indices-count > 5, k-list-nth( $indices, 6 ), null );

        // Take value from the palette only if it is a number
        $bg: if( k-meta-type-of( $bg-prop ) == number, k-get-theme-color( $src-palette-name, $bg-prop ), $bg-prop );
        $text: if( k-meta-type-of( $text-prop ) == number, k-get-theme-color( $src-palette-name, $text-prop ), $text-prop );
        $border: if( k-meta-type-of( $border-prop ) == number, k-get-theme-color( $src-palette-name, $border-prop ), $border-prop );
        $gradient: $gradient-prop;
        $shadow: $shadow-prop;
        $outline: $outline-prop;

        $result: k-map-merge($result, (
            // sass-lint:disable-block indentation
            #{$prefix}bg: $bg,
            #{$prefix}text: $text,
            #{$prefix}border: $border,
            #{$prefix}gradient: $gradient,
            #{$prefix}shadow: $shadow,
            #{$prefix}outline: $outline
        ));
    }

    $result: (
        #{$variant}: $result
    );

    @return $result;

};


@function k-process-variant-matrices( $theme-matrix, $palette-matrix: () ) {
    $result: ();

    // @debug $theme-matrix;
    // @debug $palette-matrix;

    @each $variant, $definition in $theme-matrix {
        $tc-index: k-string-index( $variant, "THEME_COLOR" );
        $src-palette-name: k-map-get( $definition, PALETTE );
        $matrix: k-map-remove( $definition, PALETTE );

        @if ($tc-index == null ) {
            $tmp-result: k-generate-theme-variant( $variant, $matrix, $src-palette-name );
            $result: k-map-merge( $result, $tmp-result);
        } @else {
            @each $color, $palette in $palette-matrix {
                $variant-name: k-string-replace( $variant, THEME_COLOR, $color);
                $palette-name: k-string-unquote($src-palette-name + "");

                @if ($palette-name == THEME_COLOR) {
                    $palette-name: k-string-replace( $palette-name, THEME_COLOR, $color );
                    $palette-name: k-map-get( $palette-matrix, $palette-name );
                }

                $tmp-result: k-generate-theme-variant( $variant-name, $matrix, $palette-name );
                $result: k-map-merge( $result, $tmp-result );
            }
        }
    }

    @return $result;
}


@function k-get-theme-palette( $name ) {
    @return k-map-get( $kendo-palettes, $name );
}

@function k-get-theme-color( $palette, $hue ) {
    @if ( k-meta-type-of( $palette ) == "map" ) {
        @return k-map-get( $palette, $hue );
    }

    @return k-map-get( k-get-theme-palette( $palette ), $hue );
}

@function k-get-theme-color-var( $name, $fallback: "inherit", $prefix: "kendo-" ) {
    @return var( --#{$prefix}#{$name}, #{$fallback} );
}

// #endregion
// #region @import "./_mixins.import.scss"; -> packages/core/scss/color-system/_mixins.import.scss

// #endregion
// #region @import "./_variables.scss"; -> packages/core/scss/color-system/_variables.scss
// Color constants
$white: #ffffff; // stylelint-disable-line scss/dollar-variable-default
$black: #000000; // stylelint-disable-line scss/dollar-variable-default

$rgba-transparent: rgba( 0, 0, 0, 0 ); // stylelint-disable-line scss/dollar-variable-default

$gradient-transparent-to-black: rgba( black, 0 ), black; // stylelint-disable-line scss/dollar-variable-default
$gradient-transparent-to-white: rgba( white, 0 ), white; // stylelint-disable-line scss/dollar-variable-default
$gradient-black-to-transparent: black, rgba( black, 0 ); // stylelint-disable-line scss/dollar-variable-default
$gradient-white-to-transparent: white, rgba( white, 0 ); // stylelint-disable-line scss/dollar-variable-default

$gradient-rainbow: #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000; // stylelint-disable-line scss/dollar-variable-default


/// Set a specific jump point for requesting color jumps
/// @group color-system
/// @access private
$kendo-color-level-step: 8% !default;

// #endregion
// #region @import "./_palettes.scss"; -> packages/core/scss/color-system/_palettes.scss
$kendo-palettes: (

    // Kendo
    neutral: (
        0: #ffffff,
        50: #f8f8f8,
        100: #ededed,
        200: #d6d6d6,
        300: #b7b7b7,
        400: #949494,
        500: #767676,
        600: #5f5f5f,
        700: #494949,
        800: #373737,
        900: #282828,
        1000: #000000
    ),
    marsala: (
        0: #ffffff,
        50: #faf0f2,
        100: #f3dde0,
        200: #e197a3,
        300: #c54e69,
        400: #8b3548,
        500: #622331,
        600: #551d2a,
        700: #441620,
        800: #340f17,
        900: #23080e,
        1000: #000000
    ),


    // Bootstrap
    bootstrapGray: (
        0: #ffffff,
        100: #f8f9fa,
        200: #e9ecef,
        300: #dee2e6,
        400: #ced4da,
        500: #adb5bd,
        600: #6c757d,
        700: #495057,
        800: #343a40,
        900: #212529,
        1000: #000000
    ),
    bootstrapBlue: (
        0: #ffffff,
        100: #cfe2ff,
        200: #9ec5fe,
        300: #6ea8fe,
        400: #3d8bfd,
        500: #0d6efd,
        600: #0a58ca,
        700: #084298,
        800: #052c65,
        900: #031633,
        1000: #000000
    ),
    bootstrapIndigo: (
        0: #ffffff,
        100: #e0cffc,
        200: #c29ffa,
        300: #a370f7,
        400: #8540f5,
        500: #6610f2,
        600: #520dc2,
        700: #3d0a91,
        800: #290661,
        900: #140330,
        1000: #000000
    ),
    bootstrapPurple: (
        0: #ffffff,
        100: #e2d9f3,
        200: #c5b3e6,
        300: #a98eda,
        400: #8c68cd,
        500: #6f42c1,
        600: #59359a,
        700: #432874,
        800: #2c1a4d,
        900: #160d27,
        1000: #000000
    ),
    bootstrapPink: (
        0: #ffffff,
        100: #f7d6e6,
        200: #efadce,
        300: #e685b5,
        400: #de5c9d,
        500: #d63384,
        600: #ab296a,
        700: #801f4f,
        800: #561435,
        900: #2b0a1a,
        1000: #000000
    ),
    bootstrapRed: (
        0: #ffffff,
        100: #f8d7da,
        200: #f1aeb5,
        300: #ea868f,
        400: #e35d6a,
        500: #dc3545,
        600: #b02a37,
        700: #842029,
        800: #58151c,
        900: #2c0b0e,
        1000: #000000
    ),
    bootstrapOrange: (
        0: #ffffff,
        100: #ffe5d0,
        200: #fecba1,
        300: #feb272,
        400: #fd9843,
        500: #fd7e14,
        600: #ca6510,
        700: #984c0c,
        800: #653208,
        900: #331904,
        1000: #000000
    ),
    bootstrapYellow: (
        0: #ffffff,
        100: #fff3cd,
        200: #ffe69c,
        300: #ffda6a,
        400: #ffcd39,
        500: #ffc107,
        600: #cc9a06,
        700: #997404,
        800: #664d03,
        900: #332701,
        1000: #000000
    ),
    bootstrapGreen: (
        0: #ffffff,
        100: #d1e7dd,
        200: #a3cfbb,
        300: #75b798,
        400: #479f76,
        500: #198754,
        600: #146c43,
        700: #0f5132,
        800: #0a3622,
        900: #051b11,
        1000: #000000
    ),
    bootstrapTeal: (
        0: #ffffff,
        100: #d2f4ea,
        200: #a6e9d5,
        300: #79dfc1,
        400: #4dd4ac,
        500: #20c997,
        600: #1aa179,
        700: #13795b,
        800: #0d503c,
        900: #06281e,
        1000: #000000
    ),
    bootstrapCyan: (
        0: #ffffff,
        100: #cff4fc,
        200: #9eeaf9,
        300: #6edff6,
        400: #3dd5f3,
        500: #0dcaf0,
        600: #0aa2c0,
        700: #087990,
        800: #055160,
        900: #032830,
        1000: #000000
    ),


    // Fluent
    fluentNeutral: (
        0: #ffffff,
        50: #faf9f8,
        100: #edebe9,
        150: #e1dfdd,
        200: #d2d0ce,
        250: #c8c6c4,
        300: #bdbbb8,
        350: #b3b0ad,
        400: #a19f9d,
        450: #8a8886,
        500: #797775,
        550: #605e5c,
        600: #484644,
        650: #3b3a39,
        700: #323130,
        750: #292827,
        800: #201f1e,
        850: #1b1a19,
        900: #161514,
        950: #11100f,
        1000: #000000
    ),


    // Material
    materialGray: (
        0: #ffffff,
        50: #fafafa,
        100: #f5f5f5,
        200: #eeeeee,
        300: #e0e0e0,
        400: #bdbdbd,
        500: #9e9e9e,
        600: #757575,
        700: #616161,
        800: #424242,
        900: #212121,
        1000: #000000
    ),
    materialBlueGray: (
        0: #ffffff,
        50: #eceff1,
        100: #cfd8dc,
        200: #b0bec5,
        300: #90a4ae,
        400: #78909c,
        500: #607d8b,
        600: #546e7a,
        700: #455a64,
        800: #37474f,
        900: #263238,
        1000: #000000
    ),
    materialRed: (
        0: #ffffff,
        50: #ffebee,
        100: #ffcdd2,
        200: #ef9a9a,
        300: #e57373,
        400: #ef5350,
        500: #f44336,
        600: #e53935,
        700: #d32f2f,
        800: #c62828,
        900: #b71c1c,
        1000: #000000
    ),
    materialPink: (
        0: #ffffff,
        50: #fce4ec,
        100: #f8bbd0,
        200: #f48fb1,
        300: #f06292,
        400: #ec407a,
        // 500 was #e91e63, but changed for better contrast against white
        500: #e51a5f,
        600: #d81b60,
        700: #c2185b,
        800: #ad1457,
        900: #880e4f,
        1000: #000000
    ),
    materialPurple: (
        0: #ffffff,
        50: #f3e5f5,
        100: #e1bee7,
        200: #ce93d8,
        300: #ba68c8,
        400: #ab47bc,
        500: #9c27b0,
        600: #8e24aa,
        700: #7b1fa2,
        800: #6a1b9a,
        900: #4a148c,
        1000: #000000
    ),
    materialDeepPurple: (
        0: #ffffff,
        50: #ede7f6,
        100: #d1c4e9,
        200: #b39ddb,
        300: #9575cd,
        400: #7e57c2,
        500: #673ab7,
        600: #5e35b1,
        700: #512da8,
        800: #4527a0,
        900: #311b92,
        1000: #000000
    ),
    materialIndigo: (
        0: #ffffff,
        50: #e8eaf6,
        100: #c5cae9,
        200: #9fa8da,
        300: #7986cb,
        400: #5c6bc0,
        500: #3f51b5,
        600: #3949ab,
        700: #303f9f,
        800: #283593,
        900: #1a237e,
        1000: #000000
    ),
    materialBlue: (
        0: #ffffff,
        50: #e3f2fd,
        100: #bbdefb,
        200: #90caf9,
        300: #64b5f6,
        400: #42a5f5,
        500: #2196f3,
        600: #1e88e5,
        700: #1976d2,
        800: #1565c0,
        900: #0d47a1,
        1000: #000000
    ),
    materialLightBlue: (
        0: #ffffff,
        50: #e1f5fe,
        100: #b3e5fc,
        200: #81d4fa,
        300: #4fc3f7,
        400: #29b6f6,
        500: #03a9f4,
        600: #039be5,
        700: #0288d1,
        800: #0277bd,
        900: #01579b,
        1000: #000000
    ),
    materialCyan: (
        0: #ffffff,
        50: #e0f7fa,
        100: #b2ebf2,
        200: #80deea,
        300: #4dd0e1,
        400: #26c6da,
        500: #00bcd4,
        600: #00acc1,
        700: #0097a7,
        800: #00838f,
        900: #006064,
        1000: #000000
    ),
    materialTeal: (
        0: #ffffff,
        50: #e0f2f1,
        100: #b2dfdb,
        200: #80cbc4,
        300: #4db6ac,
        400: #26a69a,
        500: #009688,
        600: #00897b,
        700: #00796b,
        800: #00695c,
        900: #004d40,
        1000: #000000
    ),
    materialGreen: (
        0: #ffffff,
        50: #e8f5e9,
        100: #c8e6c9,
        200: #a5d6a7,
        300: #81c784,
        400: #66bb6a,
        500: #4caf50,
        600: #43a047,
        700: #388e3c,
        800: #2e7d32,
        900: #1b5e20,
        1000: #000000
    ),
    materialLightGreen: (
        0: #ffffff,
        50: #f1f8e9,
        100: #dcedc8,
        200: #c5e1a5,
        300: #aed581,
        400: #9ccc65,
        500: #8bc34a,
        600: #7cb342,
        700: #689f38,
        800: #558b2f,
        900: #33691e,
        1000: #000000
    ),
    materialLime: (
        0: #ffffff,
        50: #f9fbe7,
        100: #f0f4c3,
        200: #e6ee9c,
        300: #dce775,
        400: #d4e157,
        500: #cddc39,
        600: #c0ca33,
        700: #afb42b,
        800: #9e9d24,
        900: #827717,
        1000: #000000
    ),
    materialYellow: (
        0: #ffffff,
        50: #fffde7,
        100: #fff9c4,
        200: #fff59d,
        300: #fff176,
        400: #ffee58,
        500: #ffeb3b,
        600: #fdd835,
        700: #fbc02d,
        800: #f9a825,
        900: #f57f17,
        1000: #000000
    ),
    materialAmber: (
        0: #ffffff,
        50: #fff8e1,
        100: #ffecb3,
        200: #ffe082,
        300: #ffd54f,
        400: #ffca28,
        500: #ffc107,
        600: #ffb300,
        700: #ffa000,
        800: #ff8f00,
        900: #ff6f00,
        1000: #000000
    ),
    materialOrange: (
        0: #ffffff,
        50: #fff3e0,
        100: #ffe0b2,
        200: #ffcc80,
        300: #ffb74d,
        400: #ffa726,
        500: #ff9800,
        600: #fb8c00,
        700: #f57c00,
        800: #ef6c00,
        900: #e65100,
        1000: #000000
    ),
    materialDeepOrange: (
        0: #ffffff,
        50: #fbe9e7,
        100: #ffccbc,
        200: #ffab91,
        300: #ff8a65,
        400: #ff7043,
        500: #ff5722,
        600: #f4511e,
        700: #e64a19,
        800: #d84315,
        900: #bf360c,
        1000: #000000
    ),
    materialBrown: (
        0: #ffffff,
        50: #efebe9,
        100: #d7ccc8,
        200: #bcaaa4,
        300: #a1887f,
        400: #8d6e63,
        500: #795548,
        600: #6d4c41,
        700: #5d4037,
        800: #4e342e,
        900: #3e2723,
        1000: #000000
    ),


    // Primer
    primerGray: (
        0: #ffffff,
        50: #f6f8fa,
        100: #eaeef2,
        200: #d0d7de,
        300: #afb8c1,
        400: #8c959f,
        500: #6e7781,
        600: #57606a,
        700: #424a53,
        800: #32383f,
        900: #24292f,
        1000: #000000
    ),
    primerBlue: (
        0: #ffffff,
        50: #ddf4ff,
        100: #b6e3ff,
        200: #80ccff,
        300: #54aeff,
        400: #218bff,
        500: #0969da,
        600: #0550ae,
        700: #033d8b,
        800: #0a3069,
        900: #002155,
        1000: #000000
    ),
    primerGreen: (
        0: #ffffff,
        50: #dafbe1,
        100: #aceebb,
        200: #6fdd8b,
        300: #4ac26b,
        400: #2da44e,
        500: #1a7f37,
        600: #116329,
        700: #044f1e,
        800: #003d16,
        900: #002d11,
        1000: #000000
    ),
    primerYellow: (
        0: #ffffff,
        50: #fff8c5,
        100: #fae17d,
        200: #eac54f,
        300: #d4a72c,
        400: #bf8700,
        500: #9a6700,
        600: #7d4e00,
        700: #633c01,
        800: #4d2d00,
        900: #3b2300,
        1000: #000000
    ),
    primerOrange: (
        0: #ffffff,
        50: #fff1e5,
        100: #ffd8b5,
        200: #ffb77c,
        300: #fb8f44,
        400: #e16f24,
        500: #bc4c00,
        600: #953800,
        700: #762c00,
        800: #5c2200,
        900: #471700,
        1000: #000000
    ),
    primerRed: (
        0: #ffffff,
        50: #ffebe9,
        100: #ffcecb,
        200: #ffaba8,
        300: #ff8182,
        400: #fa4549,
        500: #cf222e,
        600: #a40e26,
        700: #82071e,
        800: #660018,
        900: #4c0014,
        1000: #000000
    ),
    primerPurple: (
        0: #ffffff,
        50: #fbefff,
        100: #ecd8ff,
        200: #d8b9ff,
        300: #c297ff,
        400: #a475f9,
        500: #8250df,
        600: #6639ba,
        700: #512a97,
        800: #3e1f79,
        900: #2e1461,
        1000: #000000
    ),
    primerPink: (
        0: #ffffff,
        50: #ffeff7,
        100: #ffd3eb,
        200: #ffadda,
        300: #ff80c8,
        400: #e85aad,
        500: #bf3989,
        600: #99286e,
        700: #772057,
        800: #611347,
        900: #4d0336,
        1000: #000000
    ),
    primerCoral: (
        0: #ffffff,
        50: #fff0eb,
        100: #ffd6cc,
        200: #ffb4a1,
        300: #fd8c73,
        400: #ec6547,
        500: #c4432b,
        600: #9e2f1c,
        700: #801f0f,
        800: #691105,
        900: #510901,
        1000: #000000
    ),


    // Tailwind
    tailwindNeutral: (
        0: #ffffff,
        50: #fafafa,
        100: #f5f5f5,
        200: #e5e5e5,
        300: #d4d4d4,
        400: #a3a3a3,
        500: #737373,
        600: #525252,
        700: #404040,
        800: #262626,
        900: #171717,
        1000: #000000
    ),
    tailwindSlate: (
        0: #ffffff,
        50: #f8fafc,
        100: #f1f5f9,
        200: #e2e8f0,
        300: #cbd5e1,
        400: #94a3b8,
        500: #64748b,
        600: #475569,
        700: #334155,
        800: #1e293b,
        900: #0f172a,
        1000: #000000
    ),
    tailwindGray: (
        0: #ffffff,
        50: #f9fafb,
        100: #f3f4f6,
        200: #e5e7eb,
        300: #d1d5db,
        400: #9ca3af,
        500: #6b7280,
        600: #4b5563,
        700: #374151,
        800: #1f2937,
        900: #111827,
        1000: #000000
    ),
    tailwindZinc: (
        0: #ffffff,
        50: #fafafa,
        100: #f4f4f5,
        200: #e4e4e7,
        300: #d4d4d8,
        400: #a1a1aa,
        500: #71717a,
        600: #52525b,
        700: #3f3f46,
        800: #27272a,
        900: #18181b,
        1000: #000000
    ),
    tailwindStone: (
        0: #ffffff,
        50: #fafaf9,
        100: #f5f5f4,
        200: #e7e5e4,
        300: #d6d3d1,
        400: #a8a29e,
        500: #78716c,
        600: #57534e,
        700: #44403c,
        800: #292524,
        900: #1c1917,
        1000: #000000
    ),
    tailwindRed: (
        0: #ffffff,
        50: #fef2f2,
        100: #fee2e2,
        200: #fecaca,
        300: #fca5a5,
        400: #f87171,
        500: #ef4444,
        600: #dc2626,
        700: #b91c1c,
        800: #991b1b,
        900: #7f1d1d,
        1000: #000000
    ),
    tailwindOrange: (
        0: #ffffff,
        50: #fff7ed,
        100: #ffedd5,
        200: #fed7aa,
        300: #fdba74,
        400: #fb923c,
        500: #f97316,
        600: #ea580c,
        700: #c2410c,
        800: #9a3412,
        900: #7c2d12,
        1000: #000000
    ),
    tailwindAmber: (
        0: #ffffff,
        50: #fffbeb,
        100: #fef3c7,
        200: #fde68a,
        300: #fcd34d,
        400: #fbbf24,
        500: #f59e0b,
        600: #d97706,
        700: #b45309,
        800: #92400e,
        900: #78350f,
        1000: #000000
    ),
    tailwindYellow: (
        0: #ffffff,
        50: #fefce8,
        100: #fef9c3,
        200: #fef08a,
        300: #fde047,
        400: #facc15,
        500: #eab308,
        600: #ca8a04,
        700: #a16207,
        800: #854d0e,
        900: #713f12,
        1000: #000000
    ),
    tailwindLime: (
        0: #ffffff,
        50: #f7fee7,
        100: #ecfccb,
        200: #d9f99d,
        300: #bef264,
        400: #a3e635,
        500: #84cc16,
        600: #65a30d,
        700: #4d7c0f,
        800: #3f6212,
        900: #365314,
        1000: #000000
    ),
    tailwindGreen: (
        0: #ffffff,
        50: #f0fdf4,
        100: #dcfce7,
        200: #bbf7d0,
        300: #86efac,
        400: #4ade80,
        500: #22c55e,
        600: #16a34a,
        700: #15803d,
        800: #166534,
        900: #14532d,
        1000: #000000
    ),
    tailwindEmerald: (
        0: #ffffff,
        50: #ecfdf5,
        100: #d1fae5,
        200: #a7f3d0,
        300: #6ee7b7,
        400: #34d399,
        500: #10b981,
        600: #059669,
        700: #047857,
        800: #065f46,
        900: #064e3b,
        1000: #000000
    ),
    tailwindTeal: (
        0: #ffffff,
        50: #f0fdfa,
        100: #ccfbf1,
        200: #99f6e4,
        300: #5eead4,
        400: #2dd4bf,
        500: #14b8a6,
        600: #0d9488,
        700: #0f766e,
        800: #115e59,
        900: #134e4a,
        1000: #000000
    ),
    tailwindCyan: (
        0: #ffffff,
        50: #ecfeff,
        100: #cffafe,
        200: #a5f3fc,
        300: #67e8f9,
        400: #22d3ee,
        500: #06b6d4,
        600: #0891b2,
        700: #0e7490,
        800: #155e75,
        900: #164e63,
        1000: #000000
    ),
    tailwindSky: (
        0: #ffffff,
        50: #f0f9ff,
        100: #e0f2fe,
        200: #bae6fd,
        300: #7dd3fc,
        400: #38bdf8,
        500: #0ea5e9,
        600: #0284c7,
        700: #0369a1,
        800: #075985,
        900: #0c4a6e,
        1000: #000000
    ),
    tailwindBlue: (
        0: #ffffff,
        50: #eff6ff,
        100: #dbeafe,
        200: #bfdbfe,
        300: #93c5fd,
        400: #60a5fa,
        500: #3b82f6,
        600: #2563eb,
        700: #1d4ed8,
        800: #1e40af,
        900: #1e3a8a,
        1000: #000000
    ),
    tailwindIndigo: (
        0: #ffffff,
        50: #eef2ff,
        100: #e0e7ff,
        200: #c7d2fe,
        300: #a5b4fc,
        400: #818cf8,
        500: #6366f1,
        600: #4f46e5,
        700: #4338ca,
        800: #3730a3,
        900: #312e81,
        1000: #000000
    ),
    tailwindViolet: (
        0: #ffffff,
        50: #f5f3ff,
        100: #ede9fe,
        200: #ddd6fe,
        300: #c4b5fd,
        400: #a78bfa,
        500: #8b5cf6,
        600: #7c3aed,
        700: #6d28d9,
        800: #5b21b6,
        900: #4c1d95,
        1000: #000000
    ),
    tailwindPurple: (
        0: #ffffff,
        50: #faf5ff,
        100: #f3e8ff,
        200: #e9d5ff,
        300: #d8b4fe,
        400: #c084fc,
        500: #a855f7,
        600: #9333ea,
        700: #7e22ce,
        800: #6b21a8,
        900: #581c87,
        1000: #000000
    ),
    tailwindFuchsia: (
        0: #ffffff,
        50: #fdf4ff,
        100: #fae8ff,
        200: #f5d0fe,
        300: #f0abfc,
        400: #e879f9,
        500: #d946ef,
        600: #c026d3,
        700: #a21caf,
        800: #86198f,
        900: #701a75,
        1000: #000000
    ),
    tailwindPink: (
        0: #ffffff,
        50: #fdf2f8,
        100: #fce7f3,
        200: #fbcfe8,
        300: #f9a8d4,
        400: #f472b6,
        500: #ec4899,
        600: #db2777,
        700: #be185d,
        800: #9d174d,
        900: #831843,
        1000: #000000
    ),
    tailwindRose: (
        0: #ffffff,
        50: #fff1f2,
        100: #ffe4e6,
        200: #fecdd3,
        300: #fda4af,
        400: #fb7185,
        500: #f43f5e,
        600: #e11d48,
        700: #be123c,
        800: #9f1239,
        900: #881337,
        1000: #000000
    )

) !default;

// #endregion

// #endregion
// #region @import "./functions/index.import.scss"; -> packages/core/scss/functions/index.import.scss
// #region @import "_color.import.scss"; -> packages/core/scss/functions/_color.import.scss
@function k-color-alpha( $color ) {
    @return alpha( $color );
}

@function k-color-red( $color ) {
    @return red( $color );
}

@function k-color-green( $color ) {
    @return green( $color );
}

@function k-color-blue( $color ) {
    @return blue( $color );
}

@function k-color-mix( $color1, $color2, $weight: 50% ) {
    @return mix( $color1, $color2, $weight );
}

@function k-color-darken( $color, $amount) {
    @return darken( $color, $amount );
}

@function k-color-lighten( $color, $amount) {
    @return lighten( $color, $amount );
}

// #endregion
// #region @import "_color-contrast.import.scss"; -> packages/core/scss/functions/_color-contrast.import.scss
// Adapted from https://gist.github.com/sgomes/ccc72f71137fe29039c92c0a9fe9b657
// Adapted from https://github.com/twbs/bootstrap/commit/03908ea37a55eaa44c12ce5694dddc1630c980b3

//  Precomputed linear color channel values, for use in contrast calculations.
//  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
//
//  Algorithm, for c in 0 to 255:
//  f(c) {
//    c = c / 255;
//    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
//  }
//
//  This lookup table is needed since there is no `pow` in SASS.
// stylelint-disable-next-line scss/dollar-variable-default
$linear-channel-values: (
    0
    .0003035269835488375
    .000607053967097675
    .0009105809506465125
    .00121410793419535
    .0015176349177441874
    .001821161901293025
    .0021246888848418626
    .0024282158683907
    .0027317428519395373
    .003035269835488375
    .003346535763899161
    .003676507324047436
    .004024717018496307
    .004391442037410293
    .004776953480693729
    .005181516702338386
    .005605391624202723
    .006048833022857054
    .006512090792594475
    .006995410187265387
    .007499032043226175
    .008023192985384994
    .008568125618069307
    .009134058702220787
    .00972121732023785
    .010329823029626936
    .010960094006488246
    .011612245179743885
    .012286488356915872
    .012983032342173012
    .013702083047289686
    .014443843596092545
    .01520851442291271
    .01599629336550963
    .016807375752887384
    .017641954488384078
    .018500220128379697
    .019382360956935723
    .0202885630566524
    .021219010376003555
    .022173884793387385
    .02315336617811041
    .024157632448504756
    .02518685962736163
    .026241221894849898
    .027320891639074894
    .028426039504420793
    .0295568344378088
    .030713443732993635
    .03189603307301153
    .033104766570885055
    .03433980680868217
    .03560131487502034
    .03688945040110004
    .0382043715953465
    .03954623527673284
    .04091519690685319
    .042311410620809675
    .043735029256973465
    .04518620438567554
    .046665086336880095
    .04817182422688942
    .04970656598412723
    .05126945837404324
    .052860647023180246
    .05448027644244237
    .05612849004960009
    .05780543019106723
    .0595112381629812
    .06124605423161761
    .06301001765316767
    .06480326669290577
    .06662593864377289
    .06847816984440017
    .07036009569659588
    .07227185068231748
    .07421356838014963
    .07618538148130785
    .07818742180518633
    .08021982031446832
    .0822827071298148
    .08437621154414882
    .08650046203654976
    .08865558628577294
    .09084171118340768
    .09305896284668745
    .0953074666309647
    .09758734714186246
    .09989872824711389
    .10224173308810132
    .10461648409110419
    .10702310297826761
    .10946171077829933
    .1119324278369056
    .11443537382697373
    .11697066775851084
    .11953842798834562
    .12213877222960187
    .12477181756095049
    .12743768043564743
    .1301364766903643
    .13286832155381798
    .13563332965520566
    .13843161503245183
    .14126329114027164
    .14412847085805777
    .14702726649759498
    .14995978981060856
    .15292615199615017
    .1559264637078274
    .1589608350608804
    .162029375639111
    .1651321945016676
    .16826940018969075
    .1714411007328226
    .17464740365558504
    .17788841598362912
    .18116424424986022
    .184474994500441
    .18782077230067787
    .19120168274079138
    .1946178304415758
    .19806931955994886
    .20155625379439707
    .20507873639031693
    .20863687014525575
    .21223075741405523
    .21586050011389926
    .2195261997292692
    .2232279573168085
    .22696587351009836
    .23074004852434915
    .23455058216100522
    .238397573812271
    .24228112246555486
    .24620132670783548
    .25015828472995344
    .25415209433082675
    .2581828529215958
    .26225065752969623
    .26635560480286247
    .2704977910130658
    .27467731206038465
    .2788942634768104
    .2831487404299921
    .2874408377269175
    .29177064981753587
    .2961382707983211
    .3005437944157765
    .3049873140698863
    .30946892281750854
    .31398871337571754
    .31854677812509186
    .32314320911295075
    .3277780980565422
    .33245153634617935
    .33716361504833037
    .3419144249086609
    .3467040563550296
    .35153259950043936
    .3564001441459435
    .3613067797835095
    .3662525955988395
    .3712376804741491
    .3762621229909065
    .38132601143253014
    .386429433787049
    .39157247774972326
    .39675523072562685
    .4019777798321958
    .4072402119017367
    .41254261348390375
    .4178850708481375
    .4232676699860717
    .4286904966139066
    .43415363617474895
    .4396571738409188
    .44520119451622786
    .45078578283822346
    .45641102318040466
    .4620769996544071
    .467783796112159
    .47353149614800955
    .4793201831008268
    .4851499400560704
    .4910208498478356
    .4969329950608704
    .5028864580325687
    .5088813208549338
    .5149176653765214
    .5209955732043543
    .5271151257058131
    .5332764040105052
    .5394794890121072
    .5457244613701866
    .5520114015120001
    .5583403896342679
    .5647115057049292
    .5711248294648731
    .5775804404296506
    .5840784178911641
    .5906188409193369
    .5972017883637634
    .6038273388553378
    .6104955708078648
    .6172065624196511
    .6239603916750761
    .6307571363461468
    .6375968739940326
    .6444796819705821
    .6514056374198242
    .6583748172794485
    .665387298282272
    .6724431569576875
    .6795424696330938
    .6866853124353135
    .6938717612919899
    .7011018919329731
    .7083757798916868
    .7156935005064807
    .7230551289219693
    .7304607400903537
    .7379104087727308
    .7454042095403874
    .7529422167760779
    .7605245046752924
    .768151147247507
    .7758222183174236
    .7835377915261935
    .7912979403326302
    .799102738014409
    .8069522576692516
    .8148465722161012
    .8227857543962835
    .8307698767746546
    .83879901174074
    .846873231509858
    .8549926081242338
    .8631572134541023
    .8713671191987972
    .8796223968878317
    .8879231178819663
    .8962693533742664
    .9046611743911496
    .9130986517934192
    .9215818562772946
    .9301108583754237
    .938685728457888
    .9473065367331999
    .9559733532492861
    .9646862478944651
    .9734452903984125
    .9822505503331171
    .9911020971138298
    1
);

// The contrast ratio to reach against white, to determine if color changes from "light" to "dark".
// Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
$wcag-min-contrast-ratio: 7 !default;
$wcag-dark: black !default;
$wcag-light: white !default;

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function k-color-luminance( $color ) {
    $red: k-list-nth( $linear-channel-values, k-color-red( $color ) + 1 );
    $green: k-list-nth( $linear-channel-values, k-color-green( $color ) + 1 );
    $blue: k-list-nth( $linear-channel-values, k-color-blue( $color ) + 1 );

    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function k-color-contrast-ratio( $background, $foreground ) {
    // sass-lint:disable-block variable-name-format
    $backLum: k-color-luminance( $background ) + .05;
    $foreLum: k-color-luminance( $foreground ) + .05;

    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );
}

@function k-is-dark( $color ) {
    @return if( k-color-luminance( $color ) < .5, true, false );
}
@function k-is-light( $color ) {
    @return if( k-color-luminance( $color ) < .5, false, true );
}


// Contrast functions
@function k-contrast-color( $background, $dark: $wcag-dark, $light: $wcag-light, $min-ratio: $wcag-min-contrast-ratio ) {
    $foregrounds: $light, $dark, #ffffff, #000000;
    $max-ratio: 0;
    $max-ratio-color: null;

    @each $color in $foregrounds {
        $contrast-ratio: k-color-contrast-ratio( $background, $color );

        @if ( $contrast-ratio > $min-ratio ) {
            @return $color;
        } @else if ( $contrast-ratio > $max-ratio ) {
            $max-ratio: $contrast-ratio;
            $max-ratio-color: $color;
        }
    }

    // sass-lint:disable-block no-warn
    @warn "Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...";

    @return $max-ratio-color;
}

// #endregion
// #region @import "_color-manipulation.import.scss"; -> packages/core/scss/functions/_color-manipulation.import.scss
/// Set a specific jump point for requesting color jumps
/// @group color-system
/// @access private
$kendo-color-level-step: 8% !default;

@function k-color-level( $color, $level: 0 ) {

    @if ( $level == 0 ) or ( $level == 0% ) {
        @return $color;
    }

    $base: if( $level < 0, #ffffff, #000000 );
    $level: k-math-abs( $level );


    @if ( k-math-unit($level) == "%" ) {
        @return k-color-mix( $base, $color, $level );
    }

    @return k-color-mix( $base, $color, $level * $kendo-color-level-step );
}

@function k-color-tint( $color, $level: 1 ) {
    @return k-color-level( $color, -$level );
}
@function k-color-shade( $color, $level: 1 ) {
    @return k-color-level( $color, $level );
}

@function k-try-shade( $color, $level: 1 ) {
    $dark-theme: if( variable-exists( dark-theme ), $dark-theme, false );

    @if $dark-theme {
        @return k-color-tint( $color, $level );
    }

    @return k-color-shade( $color, $level );
}
@function k-try-tint( $color, $level: 1 ) {
    $dark-theme: if( variable-exists( dark-theme ), $dark-theme, false );

    @if $dark-theme {
        @return k-color-shade( $color, $level );
    }

    @return k-color-tint( $color, $level );
}


@function k-try-darken( $color, $amount ) {
    $dark-theme: if( variable-exists( dark-theme ), $dark-theme, false );

    @if $dark-theme {
        @return k-color-lighten( $color, $amount );
    }
    @return k-color-darken( $color, $amount );
}

@function k-try-lighten( $color, $amount ) {
    $dark-theme: if( variable-exists( dark-theme ), $dark-theme, false );

    @if $dark-theme {
        @return k-color-darken( $color, $amount );
    }
    @return k-color-lighten( $color, $amount );
}

@function k-rgba-to-mix( $color, $bg ) {
    $percent: k-color-alpha( $color ) * 100%;

    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );
}

// TODO: Remove this function or rethink the logic
@function k-true-mix( $color1, $color2, $weight: 50% ) {
    @return k-color-mix( rgba( $color1, 1 ), rgba( $color2, 1 ), $weight );
}

// #endregion
// #region @import "_custom-properties.import.scss"; -> packages/core/scss/functions/_custom-properties.import.scss
@function k-var( $prefix: kendo-, $var: null, $fallback: null ) {
    $_prefix: $prefix;
    $_var: $var;
    $_fallback: $fallback;

    @if ( k-string-index( $prefix, "--" ) == 1 ) {
        $_prefix: "";
        $_var: k-string-slice( $prefix, 3 );
        $_fallback: $var;
    }

    @if not $_var {
        @return null;
    }

    @if $_prefix == null {
        $_prefix: "";
    }

    @if ($_fallback != null and $_fallback != "") {
        @return var( --#{$_prefix}#{$_var}, #{$_fallback} );
    }

    @return var( --#{$_prefix}#{$_var} );
}

@function k-vars( $prefix: kendo-, $vars... ) {
    $vars: k-list-reverse( $vars );
    $result: null;

    // @debug $prefix;
    @each $var in $vars {
        $result: k-var( $prefix, $var, $result );
    }

    @return $result;
}

// #endregion
// #region @import "_lang.import.scss"; -> packages/core/scss/functions/_lang.import.scss
@function k-if-var( $var, $fallback ) {
    @return if( $var != null, $var, $fallback );
}

// #endregion
// #region @import "_list.import.scss"; -> packages/core/scss/functions/_list.import.scss
@function k-list-append( $list, $val, $separator: auto ) {
    @return append( $list, $val, $separator );
}

@function k-list-includes( $list, $value ) {
    @return k-list-index( $list, $value ) != null;
}

@function k-list-index( $list, $value ) {
    @return index( $list, $value );
}

@function k-list-is-bracketed( $list ) {
    @return is-bracketed( $list );
}

@function k-list-join( $list1, $list2, $separator: auto, $bracketed: auto ) {
    @return join( $list1, $list2, $separator, $bracketed );
}

@function k-list-length( $list ) {
    @return length( $list );
}

@function k-list-nth( $list, $n ) {
    @return nth( $list, $n );
}

@function k-list-reverse( $list: null ) {
    $result: ();

    @if ($list) {
        $len: k-list-length( $list );

        @for $i from $len through 1 {
            $result: k-list-append( $result, k-list-nth( $list, $i ) );
        }

        @return $result;
    }

    // sass-lint:disable-block no-warn
    @warn "No list passed.";
    @return $result;
}

@function k-list-separator( $list ) {
    @return list-separator( $list );
}

@function k-list-set-nth( $list, $n, $value ) {
    @return set-nth( $list, $n, $value );
}

@function k-list-zip( $lists... ) {
    @return zip( $lists... );
}

// #endregion
// #region @import "_math.import.scss"; -> packages/core/scss/functions/_math.import.scss
@function k-math-abs( $number ) {
    @return abs( $number );
}

@function k-math-ceil( $number ) {
    @return ceil( $number );
}

@function k-math-clamp( $value, $min, $max ) {
    @return k-math-max( $min, k-math-min( $max, $value ) );
}

@function k-math-compatible( $a, $b ) {
    @return comparable( $a, $b );
}

@function k-math-div( $a, $b )  {
    @return ( $a / $b );
}

@function k-math-is-unitless( $number ) {
    @return unitless( $number );
}

@function k-math-max( $a, $b ) {
    @return max( $a, $b );
}

@function k-math-min( $a, $b ) {
    @return min( $a, $b );
}

@function k-math-mod( $a, $b ) {
    @return ( $a % $b );
}

@function k-math-mul( $a, $b ) {
    @return ( $a * $b );
}

@function k-math-percentage( $number ) {
    @return ( $number * 100% );
}

@function k-math-pow( $x, $n ) {
    $ret: 1;

    @if ( $n == 0 ) {
        @return $ret;
    }

    @if ( $n > 0 ) {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        }
        @return $ret;
    }

    @for $i from $n to 0 {
        $ret: k-math-div( $ret, $x );
    }
    @return $ret;

}

@function k-math-random( $limit: null ) {
    @if ( $limit == null ) {
        @return random();
    }

    @return random( $limit );
}

@function k-math-round( $number, $precision: 0 ) {

    @if ( $precision == 0 ) {
        @return round( $number );
    }

    $pow: k-math-pow( 10, $precision );

    @return k-math-div( round( $number * $pow ), $pow );
}

@function k-math-unit( $number ) {
    @return unit( $number );
}

@function k-math-strip-unit($number) {
    @if ( k-meta-type-of( $number ) == "number" ) and not k-math-is-unitless( $number ) {
        @return k-math-div( $number, 1 * k-math-unit( $number) );
    }

    @return $number;
}

// #endregion
// #region @import "_map.import.scss"; -> packages/core/scss/functions/_map.import.scss
@function k-map-get( $map, $keys... ) {
    @each $key in $keys {
        $map: map-get( $map, $key );
    }
    @return $map;
}

@function k-map-has-key( $map, $key ) {
    @return map-has-key( $map, $key );
}

@function k-map-keys( $map ) {
    @return map-keys( $map );
}

@function k-map-merge( $map, $args... ) {
    @each $arg in $args {
        $map: map-merge( $map, $arg );
    }
    @return $map;
}

@function k-map-remove( $map, $keys... ) {
    @return map-remove( $map, $keys... );
}

@function k-map-set( $map, $key, $value ) {
    @return k-map-merge( $map, ( $key: $value ) );
}

@function k-map-values( $map ) {
    @return map-values( $map );
}

// #endregion
// #region @import "_meta.import.scss"; -> packages/core/scss/functions/_meta.import.scss
// Adapted from https://css-tricks.com/snippets/sass/advanced-type-checking/

@function k-meta-type-of( $value ) {
    @return type-of( $value );
}

@function k-meta-is-number( $value ) {
    @return k-meta-type-of( $value ) == "number";
}

@function k-meta-is-integer( $value ) {
    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;
}

@function k-meta-is-time( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "ms" "s", k-math-unit( $value ) ) != null;
}

@function k-meta-is-duration( $value ) {
    @return k-meta-is-time( $value );
}

@function k-meta-is-angle( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "deg" "rad" "grad" "turn", k-math-unit( $value ) ) != null;
}

@function k-meta-is-frequency( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "Hz" "kHz", k-math-unit( $value ) ) != null;
}

@function k-meta-is-relative-length( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", k-math-unit( $value ) ) != null;
}

@function k-meta-is-absolute-length( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "cm" "mm" "in" "px" "pt" "pc", k-math-unit( $value ) ) != null;
}

@function k-meta-is-percentage( $value ) {
    @return k-meta-is-number( $value ) and k-math-unit( $value ) == "%";
}

@function k-meta-is-length( $value ) {
    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );
}

@function k-meta-is-resolution( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "dpi" "dpcm" "dppx", k-math-unit( $value ) ) != null;
}

@function k-meta-is-position( $value ) {
    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( "top" "right" "bottom" "left" "center", $value ) != null;
}

// #endregion
// #region @import "_string.import.scss"; -> packages/core/scss/functions/_string.import.scss
@function k-string-index( $string, $substring ) {
    @return str-index( $string, $substring );
}

@function k-string-insert( $string, $insert, $index ) {
    @return str-insert( $string, $insert, $index );
}

@function k-string-length( $string ) {
    @return str-length( $string );
}

@function k-string-quote( $string ) {
    @return quote( $string );
}

// See https://www.sassmeister.com/gist/1b4f2da5527830088e4d
@function k-string-replace( $string, $search, $replace: "" ) {
    $index: k-string-index( $string, $search );

    @if $index {
        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );
    }

    @return $string;
}

@function k-string-slice( $string, $start-at, $end-at: -1 ) {
    @return str-slice( $string, $start-at, $end-at );
}

@function k-string-to-lower-case( $string ) {
    @return to-lower-case( $string );
}

@function k-string-to-upper-case( $string ) {
    @return to-upper-case( $string );
}

@function k-string-unique-id() {
    @return unique-id();
}

@function k-string-unquote( $string ) {
    @return unquote( $string );
}

// #endregion

// #endregion
// #region @import "./mixins/index.import.scss"; -> packages/core/scss/mixins/index.import.scss
// #region @import "./_border-radius.scss"; -> packages/core/scss/mixins/_border-radius.scss
// Border radius
@mixin border-radius( $radius: null ) {
    @if $enable-rounded {
        border-radius: $radius;
    }
}

@mixin border-top-radius( $radius: null ) {
    @if $enable-rounded {
        border-top-left-radius: $radius;
        border-top-right-radius: $radius;
    }
}

@mixin border-right-radius( $radius: null ) {
    @if $enable-rounded {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
}

@mixin border-bottom-radius( $radius: null ) {
    @if $enable-rounded {
        border-bottom-right-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

@mixin border-left-radius( $radius: null ) {
    @if $enable-rounded {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

@mixin border-top-radius-only( $radius: null ) {
    @if $enable-rounded {
        border-radius: $radius $radius 0 0;
    }
}

@mixin border-right-radius-only( $radius: null ) {
    @if $enable-rounded {
        border-radius: 0 $radius $radius 0;
    }
}

@mixin border-bottom-radius-only( $radius: null ) {
    @if $enable-rounded {
        border-radius: 0 0 $radius $radius;
    }
}

@mixin border-left-radius-only( $radius: null ) {
    @if $enable-rounded {
        border-radius: $radius 0 0 $radius;
    }
}

// #endregion
// #region @import "./_box-shadow.scss"; -> packages/core/scss/mixins/_box-shadow.scss
@mixin box-shadow( $shadow... ) {
    @if $enable-shadows and nth($shadow, 1) {
        box-shadow: $shadow;
    }
}

// #endregion
// #region @import "./_data-uri.scss"; -> packages/core/scss/mixins/_data-uri.scss
/// A list of files converted to data URIs
/// @access private
$data-uris: () !default;

/// Saves a data URI that can be used from the $data-uris map instead of a file reference.
/// @access private
/// @param {String} $name - The name of the resource.
/// @param {String} $content - The data URI of the resource.
/// @require $data-uris
@mixin register-data-uri( $name, $content ) {
    @if ( k-map-has-key( $data-uris, $name ) ) {
        // sass-lint:disable-block no-warn
        @warn "Attempt to redefine data URI of file `#{$name}`.";
    }

    $data-uris: k-map-merge( $data-uris, ( $name: $content ) ) !global;
}

// #endregion
// #region @import "./_disabled.scss"; -> packages/core/scss/mixins/_disabled.scss
$disabled-styling: () !default;

// Disabled
@mixin disabled( $disabled-styling ) {
    outline: none;
    cursor: default;
    opacity: k-map-get($disabled-styling, opacity);
    filter: k-map-get($disabled-styling, filter);
    pointer-events: none;
    box-shadow: none;
}

@mixin disabled-legacy-ie( $disabled-styling ) {
    outline: none;
    cursor: default;
    opacity: k-map-get($disabled-styling, opacity);
    box-shadow: none;
}

// #endregion
// #region @import "./_gradient.scss"; -> packages/core/scss/mixins/_gradient.scss
@mixin linear-gradient( $gradient: null ) {
    @if $gradient and $enable-gradients {
        @if $gradient == none {
            background-image: none;
        } @else {
            background-image: linear-gradient( $gradient );
        }
    }
}

@mixin striped-gradient( $color: rgba( white, .15 ), $angle: 45deg ) {
    background-image: linear-gradient( $angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent );
}

@mixin repeating-striped-gradient( $color: rgba( white, .15), $background: white, $angle: 45deg, $large-step: 2px, $small-step: 1px ) {
    background-image: repeating-linear-gradient( $angle, $background, $background $small-step, $color $small-step, $color $large-step );
}

@mixin checkerboard-gradient( $primary-color: white, $secondary-color: rgba( black, .09 ), $size: 10px ) {
    // sass-lint:disable-block indentation
    $_position: calc( #{$size} / 2 );

    background:
        linear-gradient( 45deg, $secondary-color 25%, transparent 25%, transparent 75%, $secondary-color 75%, $secondary-color ),
        linear-gradient( 45deg, $secondary-color 25%, transparent 25%, transparent 75%, $secondary-color 75%, $secondary-color ),
        $primary-color;
    background-repeat: repeat, repeat;
    background-position: 0px 0px, $_position $_position;
    transform-origin: 0 0 0;
    background-origin: padding-box, padding-box;
    background-size: $size $size, $size $size;
    box-shadow: none;
    text-shadow: none;
    transition: none;
    transform: scaleX(1) scaleY(1) scaleZ(1);
}

// #endregion
// #region @import "./_hide-scrollbar.scss"; -> packages/core/scss/mixins/_hide-scrollbar.scss
$default-scrollbar-width: 17px !default;

@mixin hide-scrollbar( $dir: "right", $max-scrollbar: 100px ) {
    // anything larger than the scrollbar width will do
    $scrollbar-size: var( --kendo-scrollbar-width, #{$default-scrollbar-width} );
    $margin: calc( -#{$max-scrollbar} - #{$scrollbar-size} );

    padding-right: $max-scrollbar;
    padding-left: $max-scrollbar;

    @if ( $dir == "right" ) {
        margin-left: -$max-scrollbar;
        margin-right: $margin;
    } @else {
        margin-left: $margin;
        margin-right: -$max-scrollbar;
    }
}

// #endregion
// #region @import "./_import-once.scss"; -> packages/core/scss/mixins/_import-once.scss
/// A list of exported modules.
/// @access private
$imported-modules: () !default;

/// Outputs a module once, no matter how many times it is included.
/// @access public
/// @param {String} $name - The name of the exported module.
/// @require $imported-modules
@mixin exports( $name ) {
    @if (k-list-index( $imported-modules, $name ) == null) {
        $imported-modules: k-list-append( $imported-modules, $name ) !global;
        @content;
    }
}

// #endregion
// #region @import "./_typography.scss"; -> packages/core/scss/mixins/_typography.scss
@mixin typography( $font-size: null, $font-family: null, $line-height: null, $font-weight: null, $letter-spacing: null ) {
    font-size: $font-size;
    font-family: $font-family;
    line-height: $line-height;
    font-weight: $font-weight;
    letter-spacing: $letter-spacing;
}

// #endregion

@mixin fill( $color: null, $bg: null, $border: null, $gradient: null ) {
    border-color: $border;
    color: $color;
    background-color: $bg;
    @include linear-gradient( $gradient );
}

@mixin background-image( $background-image: null ) {
    @if $background-image {
        background-image: url(#{$background-image});
    }
}

// #endregion
// #region @import "./module-system/index.import.scss"; -> packages/core/scss/module-system/index.import.scss
// #region @import "./_components.scss"; -> packages/core/scss/module-system/_components.scss
$kendo-components: (
    // Typography and utils
    "typography",
    "utils",
    "cursor",
    "draggable",

    // Generic content
    "table",
    "icon",
    "chip",
    "messagebox",

    // Primitive components
    "input",
    "list",
    "listgroup",
    "overlay",
    "ripple",
    "virtual-scroller",

    // Indicators
    "avatar",
    "badge",
    "color-preview",
    "loader",
    "skeleton",
    "tooltip",

    // Native forms
    "button",
    "split-button",
    "menu-button",
    "textbox",
    "textarea",
    "checkbox",
    "listbox",
    "progressbar",
    "radio",
    "slider",

    // Form helpers
    "form",
    "validator",
    "floating-label",

    // Form requirements
    "calendar",
    "popup",
    "time-selector",

    // Augmented inputs
    "autocomplete",
    "captcha",
    "color-palette",
    "color-gradient",
    "color-editor",
    "color-picker",
    "combobox",
    "date-input",
    "date-picker",
    "time-picker",
    "date-time-picker",
    "date-range-picker",
    "dropdown-grid",
    "dropdown-list",
    "dropdown-tree",
    "masked-textbox",
    "multiselect",
    "numeric-textbox",
    "rating",
    "searchbox",
    "switch",
    "upload",
    "dropzone",

    // Command interfaces
    "actions",
    "appbar",
    "fab",
    "menu",
    "toolbar",

    // Popups and modals
    "action-sheet",
    "dialog",
    "drawer",
    "notification",
    "popover",
    "responsive-panel",
    "window",

    // Navigation
    "bottom-navigation",
    "breadcrumb",
    "pager",
    "stepper",
    "tabstrip",
    "treeview",
    "wizard",

    // Layout & containers
    "card",
    "expander",
    "panelbar",
    "splitter",
    "tile-layout",

    // Data management
    "grid",
    "listview",
    "spreadsheet",
    "pivotgrid",
    "treelist",
    "filter",
    "file-manager",
    "task-board",

    // Editors
    "editor",
    "image-editor",

    // Scheduling
    "gantt",
    "scheduler",

    // Misc
    "adaptive",
    "chat",
    "media-player",
    "timeline",
    "pdf-viewer",
    "scroller",
    "scroll-view",

    // Dataviz
    "dataviz",
    "map",
    "orgchart",
    "signature"
) !default;

// #endregion
// #region @import "./_dependencies.scss"; -> packages/core/scss/module-system/_dependencies.scss
$_kendo-dependencies: (
    action-sheet: (
        "icon",
        "listgroup",
        "popup"
    ),
    actions: (),
    adaptive: (),
    appbar: (),
    autocomplete: (
        "button",
        "icon",
        "input",
        "list",
        "popup"
    ),
    avatar: (),
    badge: (),
    bottom-navigation: (
        "icon"
    ),
    breadcrumb: (
        "icon",
        "textbox"
    ),
    button: (
        "badge",
        "icon"
    ),
    calendar: (
        "button",
        "list"
    ),
    captcha: (
        "button",
        "slider",
        "textbox"
    ),
    card: (
        "actions",
        "button",
        // "utils/flex",
        // "utils/grid"
    ),
    chat: (
        "avatar",
        "card",
        "textbox",
        "toolbar"
    ),
    checkbox: (),
    chip: (),
    color-editor: (
        "actions",
        "color-palette",
        "color-preview",
        "color-gradient"
    ),
    color-gradient: (
        "button",
        "numeric-textbox",
        "slider",
        "textbox",
        // "utils/flex"
    ),
    color-palette: (
        "color-preview",
        // "utils/flex"
    ),
    color-preview: (),
    color-picker: (
        "button",
        "color-editor",
        "input",
        "popup"
    ),
    combobox: (
        "button",
        "input",
        "popup",
        "list"
    ),
    cursor: (),
    dataviz: (
        "popup",
        "tooltip"
    ),
    date-input: (
        "input"
    ),
    date-picker: (
        "button",
        "calendar",
        "icon",
        "input",
        "popup"
    ),
    date-range-picker: (
        "date-picker"
    ),
    date-time-picker: (
        "date-picker",
        "time-picker"
    ),
    dialog: (
        "window"
    ),
    draggable: (),
    drawer: (
        "list",
        "overlay"
    ),
    dropdown-grid: (
        "button",
        "grid",
        "icon",
        "input",
        "popup",
        "table"
    ),
    dropdown-list: (
        "button",
        "icon",
        "input",
        "list",
        "popup"
    ),
    dropdown-tree: (
        "button",
        "icon",
        "input",
        "popup",
        "treeview"
    ),
    dropzone: (),
    editor: (
        "button",
        "checkbox",
        "color-picker",
        "combobox",
        "dropdown-list",
        "toolbar",
        "upload",
        "window"
    ),
    expander: (
        "icon",
        "list",
        // "utils/display",
        // "utils/flex"
    ),
    fab: (
        "button",
        "badge",
        // "utils/position"
    ),
    file-manager: (
        "breadcrumb",
        "dialog",
        "grid",
        "icon",
        "input",
        "listview",
        "menu",
        "splitter",
        "switch",
        "toolbar",
        "treeview",
        "upload"
    ),
    filter: (
        "button",
        "checkbox",
        "date-time-picker",
        "dropdown-list",
        "input",
        "numeric-textbox",
        "textbox",
        "toolbar"
    ),
    floating-label: (
        "input"
    ),
    form: (
        "actions",
        "button",
        "toolbar"
    ),
    gantt: (
        "button",
        "date-time-picker",
        "input",
        "numeric-textbox",
        "splitter",
        "treelist",
        "validator",
        "window"
    ),
    grid: (
        "actions",
        "button",
        "checkbox",
        "dialog",
        "input",
        "list",
        "menu",
        "pager",
        "popup",
        "radio",
        "skeleton",
        "toolbar",
        "validator"
    ),
    icon: (),
    image-editor: (
        "checkbox",
        "dropdown-list",
        "form",
        "numeric-textbox",
        "toolbar"
    ),
    input: (
        "button",
        "icon"
    ),
    list: (),
    listbox: (
        "button",
        "list"
    ),
    listgroup: (),
    listview: (
        "pager",
        // "utils/grid",
        // "utils/flex"
    ),
    loader: (),
    map: (
        "button",
        "scroller",
        // "utils/position"
    ),
    masked-textbox: (
        "button",
        "input"
    ),
    media-player: (
        "slider",
        "toolbar"
    ),
    menu: (
        "button",
        "icon",
        "popup"
    ),
    menu-button: (
        "button",
        "menu"
    ),
    messagebox: (),
    multiselect: (
        "button",
        "chip",
        "icon",
        "input",
        "list",
        "popup"
    ),
    notification: (
        "button",
        "icon",
        "popup"
    ),
    numeric-textbox: (
        "button",
        "icon",
        "input"
    ),
    orgchart: (
        "button",
        "card",
        "dropdown-list",
        "icon",
        "menu",
        "textbox",
        "upload",
        "window"
    ),
    overlay: (),
    pager: (
        "dropdown-list",
        "icon",
        "list",
        "toolbar"
    ),
    panelbar: (
        "icon"
    ),
    pdf-viewer: (
        "button",
        "combobox",
        "dialog",
        "dropzone",
        "pager",
        "textbox",
        "toolbar",
        "window"
    ),
    pivotgrid: (
        "dialog",
        "grid",
        "list",
        "treeview",
        // "utils/flex",
        // "utils/grid",
        // "utils/position"
    ),
    popover: (
        "card",
        "popup"
    ),
    popup: (),
    progressbar: (),
    radio: (),
    rating: (
        "icon"
    ),
    responsive-panel: (),
    ripple: (),
    scheduler: (
        "button",
        "date-time-picker",
        "dialog",
        "dropdown-list",
        "toolbar",
        "tooltip"
    ),
    scroller: (),
    scroll-view: (
        "button"
    ),
    searchbox: (
        "button",
        "input"
    ),
    signature: (
        "button",
        "input"
    ),
    skeleton: (),
    slider: (
        "button",
        "tooltip"
    ),
    split-button: (
        "button",
        "menu"
    ),
    splitter: (
        "icon"
    ),
    spreadsheet: (
        "button",
        "checkbox",
        "color-picker",
        "combobox",
        "date-time-picker",
        "dropdown-list",
        "list",
        "menu",
        "radio",
        "tabstrip",
        "toolbar",
        "treeview",
        "upload",
        "window"
    ),
    stepper: (
        "icon",
        "progressbar"
    ),
    switch: (),
    table: (),
    tabstrip: (
        "button",
        "icon"
    ),
    task-board: (
        "card",
        "form",
        "searchbox",
        "textbox",
        "toolbar"
    ),
    textarea: (
        "button",
        "icon",
        "input"
    ),
    textbox: (
        "button",
        "icon",
        "input"
    ),
    tile-layout: (
        "card"
    ),
    time-duration-picker: (
        "button",
        "icon",
        "input",
        "list",
        "popup",
        "time-selector"
    ),
    time-selector: (
        "actions",
        "button",
        "list"
    ),
    timeline: (
        "button",
        "card",
        "icon"
    ),
    time-picker: (
        "button",
        "icon",
        "input",
        "list",
        "popup",
        "time-selector"
    ),
    toolbar: (
        "button",
        "icon",
        "menu",
        "popup"
    ),
    tooltip: (
        "button",
        "icon",
        "popup"
    ),
    treelist: (
        "grid"
    ),
    treeview: (
        "checkbox",
        "icon"
    ),
    typography: (),
    upload: (
        "actions",
        "button",
        "dropzone",
        "icon",
        "listgroup",
        "toolbar"
    ),
    utils: (),
    validator: (
        "tooltip"
    ),
    virtual-scroller: (),
    window: (
        "actions",
        "button",
        "icon",
        "overlay"
    ),
    wizard: (
        "button",
        "form",
        "stepper"
    )
);

// #endregion

$_deps: ();
$_imported: ();

@mixin module-register( $name: null, $dependencies: null ) {
    @if (k-list-index( $kendo-components, $name) != null) {
        $_deps: k-map-merge( $_deps, ( $name: $dependencies ) );

        @if $dependencies {
            @each $dep in $dependencies {
                @if ( k-list-index( $kendo-components, $dep ) == null ) {
                    // sass-lint:disable-block no-warn
                    @warn "The module \"#{$name}\" depends on module \"#{$dep}\", but the styles will not be loaded!";
                }
            }
        }
    }
}

@mixin module-render( $name: null ) {
    $dependencies: k-map-get( $_deps, $name );

    @if $dependencies {
        @each $dep in $dependencies {
            @if ( k-list-index( $_imported, $dep ) == null ) {
                // sass-lint:disable-block no-warn
                @warn "The module \"#{$name}\" depends on module \"#{$dep}\", but the styles have not been loaded yet!";
            }
        }
    }

    @if ( k-list-index( $kendo-components, $name ) != null ) and ( k-list-index( $_imported, $name ) == null )  {
        $_imported: k-list-append( $_imported, $name );
        @content;
    }
}

@mixin verify-dependencies() {
    @each $component in $kendo-components {
        @if (k-map-has-key( $_kendo-dependencies, $component) == false) {
            // sass-lint:disable-block no-warn
            @error "Module '#{$component}' is not defined.";
        }
    }
}
@include verify-dependencies();

// #endregion
// #region @import "./styles/index.import.scss"; -> packages/core/scss/styles/index.import.scss
// #region @import "./_accessibility.scss"; -> packages/core/scss/styles/_accessibility.scss
/// @name k-sr-only
/// @description This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.
/// @group accessibility
.k-sr-only {
    position: absolute;
    left: -1px;
    width: 1px;
    height: 1px;
    overflow: hidden;
}

// #endregion
// #region @import "./_asp-fallback.scss"; -> packages/core/scss/styles/_asp-fallback.scss
.k-theme-test-class,
.k-common-test-class {
    opacity: 0;
}

// #endregion
// #region @import "./_layout"; -> packages/core/scss/styles/_layout.scss
// Basic layout
.k-hstack {
    display: flex;
    flex-flow: row nowrap;
}
.k-vstack {
    display: flex;
    flex-flow: column nowrap;
}
.k-spacer {
    flex: none;
    flex-grow: 1;
}


// Separator
.k-separator {
    width: auto;
    height: 0;
    border-width: 1px 0 0;
    border-style: solid;
    border-color: inherit;
    display: block;
    flex-grow: 0 !important; // sass-lint:disable-line no-important
    flex-shrink: 0 !important; // sass-lint:disable-line no-important
    align-self: stretch;
}
.k-separator-horizontal,
.k-vstack > .k-separator {
    width: auto;
    height: 0;
    border-width: 1px 0 0;
}
.k-separator-vertical,
.k-hstack > .k-separator {
    width: 0;
    height: auto;
    border-width: 0 0 0 1px;
}

hr.k-separator {
    margin: 0;
    padding: 0;
}


// Hidden
.k-hidden {
    display: none !important; // sass-lint:disable-line no-important
}


// RTL
.k-rtl {
    direction: rtl;
}

// #endregion
// #region @import "./_normalize.scss"; -> packages/core/scss/styles/_normalize.scss
// Hidden attribute
[hidden] {
    display: none !important; // sass-lint:disable-line no-important
}


// Hide script tags
// see https://github.com/telerik/kendo-themes/issues/2360
script {
    display: none !important; // sass-lint:disable-line no-important
}

// #endregion

// #endregion

// #endregion
